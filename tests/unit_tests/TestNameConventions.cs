// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2014-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.unit_tests {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.util;
	
	public class TestNameConventions {
		public void testNumberWithMarker() {
			Name expected = new Name("/%AA%03%E8");
			long number = 1000;
			int marker = 0xAA;
			Assert.AssertEquals(
					"fromNumberWithMarker did not create the expected component",
					expected, new Name().append(net.named_data.jndn.Name.Component
							.fromNumberWithMarker(number, marker)));
			try {
				Assert.AssertEquals(
						"toNumberWithMarker did not return the expected value",
						number, expected.get(0).toNumberWithMarker(marker));
			} catch (EncodingException ex) {
				Assert.Fail("Error while parsing a nonNegativeInteger: " + ex.Message);
			}
		}
	
		public void testSegment() {
			Name expected = new Name("/%00%27%10");
			Assert.AssertTrue(expected.get(0).isSegment());
			long number = 10000;
			Assert.AssertEquals("appendSegment did not create the expected component",
					expected, new Name().appendSegment(number));
			try {
				Assert.AssertEquals("toSegment did not return the expected value", number,
						expected.get(0).toSegment());
			} catch (EncodingException ex) {
				Assert.Fail("Error while parsing a nonNegativeInteger: " + ex.Message);
			}
		}
	
		public void testSegmentOffset() {
			Name expected = new Name("/%FB%00%01%86%A0");
			Assert.AssertTrue(expected.get(0).isSegmentOffset());
			long number = 100000;
			Assert.AssertEquals(
					"appendSegmentOffset did not create the expected component",
					expected, new Name().appendSegmentOffset(number));
			try {
				Assert.AssertEquals("toSegmentOffset did not return the expected value",
						number, expected.get(0).toSegmentOffset());
			} catch (EncodingException ex) {
				Assert.Fail("Error while parsing a nonNegativeInteger: " + ex.Message);
			}
		}
	
		public void testVersion() {
			Name expected = new Name("/%FD%00%0FB%40");
			Assert.AssertTrue(expected.get(0).isVersion());
			long number = 1000000;
			Assert.AssertEquals("appendVersion did not create the expected component",
					expected, new Name().appendVersion(number));
			try {
				Assert.AssertEquals("toVersion did not return the expected value", number,
						expected.get(0).toVersion());
			} catch (EncodingException ex) {
				Assert.Fail("Error while parsing a nonNegativeInteger: " + ex.Message);
			}
		}
	
		public void testSequenceNumber() {
			Name expected = new Name("/%FE%00%98%96%80");
			Assert.AssertTrue(expected.get(0).isSequenceNumber());
			long number = 10000000;
			Assert.AssertEquals(
					"appendSequenceNumber did not create the expected component",
					expected, new Name().appendSequenceNumber(number));
			try {
				Assert.AssertEquals("toSequenceNumber did not return the expected value",
						number, expected.get(0).toSequenceNumber());
			} catch (EncodingException ex) {
				Assert.Fail("Error while parsing a nonNegativeInteger: " + ex.Message);
			}
		}
	
		public void testTimestamp() {
			Name expected = new Name("/%FC%00%04%7BE%E3%1B%00%00");
			Assert.AssertTrue(expected.get(0).isTimestamp());
			// 40 years (not counting leap years) in microseconds.
			long number = (long) 40 * 365 * 24 * 3600 * 1000000;
			Assert.AssertEquals("appendTimestamp did not create the expected component",
					expected, new Name().appendTimestamp(number));
			try {
				Assert.AssertEquals("toTimestamp did not return the expected value",
						number, expected.get(0).toTimestamp());
			} catch (EncodingException ex) {
				Assert.Fail("Error while parsing a nonNegativeInteger: " + ex.Message);
			}
		}
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}}
