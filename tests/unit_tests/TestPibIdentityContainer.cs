// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.unit_tests {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.security.pib;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util;
	
	public class TestPibIdentityContainer {
		public void setUp() {
			fixture = new PibDataFixture();
		}
	
		internal PibDataFixture fixture;
	
		public void testBasic() {
			PibMemory pibImpl = new PibMemory();
	
			// Start with an empty container.
			PibIdentityContainer container = new PibIdentityContainer(pibImpl);
			Assert.AssertEquals(0, container.size());
			Assert.AssertEquals(0, container.getIdentities_().Count);
	
			// Add the first identity.
			PibIdentity identity11 = container.add(fixture.id1);
			Assert.AssertTrue(fixture.id1.equals(identity11.getName()));
			Assert.AssertEquals(1, container.size());
			Assert.AssertEquals(1, container.getIdentities_().Count);
			Assert.AssertTrue(container.getIdentities_().Contains(fixture.id1));
	
			// Add the same identity again.
			PibIdentity identity12 = container.add(fixture.id1);
			Assert.AssertTrue(fixture.id1.equals(identity12.getName()));
			Assert.AssertEquals(1, container.size());
			Assert.AssertEquals(1, container.getIdentities_().Count);
			Assert.AssertTrue(container.getIdentities_().Contains(fixture.id1));
	
			// Add the second identity.
			PibIdentity identity21 = container.add(fixture.id2);
			Assert.AssertTrue(fixture.id2.equals(identity21.getName()));
			Assert.AssertEquals(2, container.size());
			Assert.AssertEquals(2, container.getIdentities_().Count);
			Assert.AssertTrue(container.getIdentities_().Contains(fixture.id1));
			Assert.AssertTrue(container.getIdentities_().Contains(fixture.id2));
	
			// Get identities.
			try {
				container.get(fixture.id1);
			} catch (Exception ex) {
				Assert.Fail("Unexpected exception: " + ex.Message);
			}
			try {
				container.get(fixture.id2);
			} catch (Exception ex_0) {
				Assert.Fail("Unexpected exception: " + ex_0.Message);
			}
			try {
				container.get(new Name("/non-existing"));
				Assert.Fail("Did not throw the expected exception");
			} catch (Pib.Error ex_1) {
			} catch (Exception ex_2) {
				Assert.Fail("Did not throw the expected exception");
			}
	
			// Check the identity.
			PibIdentity identity1 = container.get(fixture.id1);
			PibIdentity identity2 = container.get(fixture.id2);
			Assert.AssertTrue(fixture.id1.equals(identity1.getName()));
			Assert.AssertTrue(fixture.id2.equals(identity2.getName()));
	
			// Create another container from the same PibImpl. The cache should be empty.
			PibIdentityContainer container2 = new PibIdentityContainer(pibImpl);
			Assert.AssertEquals(2, container2.size());
			Assert.AssertEquals(0, container2.getIdentities_().Count);
	
			// Get keys. The cache should be filled.
			try {
				container2.get(fixture.id1);
			} catch (Exception ex_3) {
				Assert.Fail("Unexpected exception: " + ex_3.Message);
			}
			Assert.AssertEquals(2, container2.size());
			Assert.AssertEquals(1, container2.getIdentities_().Count);
	
			try {
				container2.get(fixture.id2);
			} catch (Exception ex_4) {
				Assert.Fail("Unexpected exception: " + ex_4.Message);
			}
			Assert.AssertEquals(2, container2.size());
			Assert.AssertEquals(2, container2.getIdentities_().Count);
	
			// Remove a key.
			container2.remove(fixture.id1);
			Assert.AssertEquals(1, container2.size());
			Assert.AssertEquals(1, container2.getIdentities_().Count);
			Assert.AssertTrue(!container2.getIdentities_().Contains(fixture.id1));
			Assert.AssertTrue(container2.getIdentities_().Contains(fixture.id2));
	
			// Remove another key.
			container2.remove(fixture.id2);
			Assert.AssertEquals(0, container2.size());
			Assert.AssertEquals(0, container2.getIdentities_().Count);
			Assert.AssertTrue(!container2.getIdentities_().Contains(fixture.id2));
		}
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}}
