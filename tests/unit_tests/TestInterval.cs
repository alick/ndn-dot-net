// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.unit_tests {
	
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.util;
	
	public class TestInterval {
		public void testConstruction() {
			// Construct with the right parameters.
			Interval interval1 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T120000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T160000"));
			Assert.AssertEquals("20150825T120000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(interval1.getStartTime()));
			Assert.AssertEquals("20150825T160000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(interval1.getEndTime()));
			Assert.AssertEquals(true, interval1.isValid());
	
			// Construct with the invalid interval.
			Interval interval2 = new Interval();
			Assert.AssertEquals(false, interval2.isValid());
	
			// Construct with the empty interval.
			Interval interval3 = new Interval(true);
			Assert.AssertEquals(true, interval3.isValid());
			Assert.AssertEquals(true, interval3.isEmpty());
		}
	
		public void testCoverTimePoint() {
			Interval interval = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T120000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T160000"));
	
			double timePoint1 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T120000");
			double timePoint2 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T130000");
			double timePoint3 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T170000");
			double timePoint4 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T110000");
	
			Assert.AssertEquals(true, interval.covers(timePoint1));
			Assert.AssertEquals(true, interval.covers(timePoint2));
			Assert.AssertEquals(false, interval.covers(timePoint3));
			Assert.AssertEquals(false, interval.covers(timePoint4));
		}
	
		public void testIntersectionAndUnion() {
			Interval interval1 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T030000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T050000"));
			// No intersection.
			Interval interval2 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T050000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T070000"));
			// No intersection.
			Interval interval3 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T060000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T070000"));
			// There's an intersection.
			Interval interval4 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T010000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T040000"));
			// Right in interval1, there's an intersection.
			Interval interval5 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T030000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T040000"));
			// Wrap interval1, there's an intersection.
			Interval interval6 = new Interval(net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T010000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T050000"));
			// Empty interval.
			Interval interval7 = new Interval(true);
	
			Interval tempInterval = new Interval(interval1);
			tempInterval.intersectWith(interval2);
			Assert.AssertEquals(true, tempInterval.isEmpty());
	
			tempInterval = new Interval(interval1);
			bool gotError = true;
			try {
				tempInterval.unionWith(interval2);
				gotError = false;
			} catch (Exception ex) {
			}
			if (!gotError)
				Assert.Fail("Expected error in unionWith(interval2)");
	
			tempInterval = new Interval(interval1);
			tempInterval.intersectWith(interval3);
			Assert.AssertEquals(true, tempInterval.isEmpty());
	
			tempInterval = new Interval(interval1);
			gotError = true;
			try {
				tempInterval.unionWith(interval3);
				gotError = false;
			} catch (Interval.Error ex_0) {
			}
			if (!gotError)
				Assert.Fail("Expected error in unionWith(interval3)");
	
			tempInterval = new Interval(interval1);
			tempInterval.intersectWith(interval4);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T030000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T040000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
	
			tempInterval = new Interval(interval1);
			tempInterval.unionWith(interval4);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T010000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T050000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
	
			tempInterval = new Interval(interval1);
			tempInterval.intersectWith(interval5);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T030000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T040000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
	
			tempInterval = new Interval(interval1);
			tempInterval.unionWith(interval5);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T030000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T050000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
	
			tempInterval = new Interval(interval1);
			tempInterval.intersectWith(interval6);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T030000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T050000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
	
			tempInterval = new Interval(interval1);
			tempInterval.unionWith(interval6);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T010000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T050000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
	
			tempInterval = new Interval(interval1);
			tempInterval.intersectWith(interval7);
			Assert.AssertEquals(true, tempInterval.isEmpty());
	
			tempInterval = new Interval(interval1);
			tempInterval.unionWith(interval7);
			Assert.AssertEquals(false, tempInterval.isEmpty());
			Assert.AssertEquals("20150825T030000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getStartTime()));
			Assert.AssertEquals("20150825T050000", net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(tempInterval.getEndTime()));
		}
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}}
