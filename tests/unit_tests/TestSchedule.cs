// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.unit_tests {
	
	using ILOG.J2CsMapping.NIO;
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.util;
	
	public class TestSchedule {
		public void testCalculateIntervalWithBlackAndWhite() {
			Schedule schedule = new Schedule();
			RepetitiveInterval interval1 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 5, 10, 2,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval2 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 6, 8, 1,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval3 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 7, 8);
			RepetitiveInterval interval4 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"), 4, 7);
	
			schedule.addWhiteInterval(interval1);
			schedule.addWhiteInterval(interval2);
			schedule.addWhiteInterval(interval4);
			schedule.addBlackInterval(interval3);
	
			Schedule.Result result;
	
			// timePoint1 --> positive 8.25 4-10
			double timePoint1 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T063000");
			result = schedule.getCoveringInterval(timePoint1);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150825T040000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150825T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint2 --> positive 8.26 6-8
			double timePoint2 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150826T073000");
			result = schedule.getCoveringInterval(timePoint2);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150826T060000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150826T080000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint3 --> positive 8.27 5-7
			double timePoint3 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T053000");
			result = schedule.getCoveringInterval(timePoint3);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150827T050000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150827T070000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint4 --> positive 8.27 5-7
			double timePoint4 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T063000");
			result = schedule.getCoveringInterval(timePoint4);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150827T050000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150827T070000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint5 --> negative 8.27 7-8
			double timePoint5 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T073000");
			result = schedule.getCoveringInterval(timePoint5);
			Assert.AssertEquals(false, result.isPositive);
			Assert.AssertEquals(false, result.interval.isEmpty());
			Assert.AssertEquals("20150827T070000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150827T080000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint6 --> negative 8.25 10-24
			double timePoint6 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T113000");
			result = schedule.getCoveringInterval(timePoint6);
			Assert.AssertEquals(false, result.isPositive);
			Assert.AssertEquals(false, result.interval.isEmpty());
			Assert.AssertEquals("20150825T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150826T000000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
		}
	
		public void testCalculateIntervalWithoutBlack() {
			Schedule schedule = new Schedule();
			RepetitiveInterval interval1 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 5, 10, 2,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval2 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 6, 8, 1,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval3 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"), 4, 7);
	
			schedule.addWhiteInterval(interval1);
			schedule.addWhiteInterval(interval2);
			schedule.addWhiteInterval(interval3);
	
			Schedule.Result result;
	
			// timePoint1 --> positive 8.25 4-10
			double timePoint1 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T063000");
			result = schedule.getCoveringInterval(timePoint1);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150825T040000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150825T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint2 --> positive 8.26 6-8
			double timePoint2 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150826T073000");
			result = schedule.getCoveringInterval(timePoint2);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150826T060000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150826T080000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint3 --> positive 8.27 5-10
			double timePoint3 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T053000");
			result = schedule.getCoveringInterval(timePoint3);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150827T050000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150827T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint4 --> negative 8.25 10-24
			double timePoint4 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T113000");
			result = schedule.getCoveringInterval(timePoint4);
			Assert.AssertEquals(false, result.isPositive);
			Assert.AssertEquals(false, result.interval.isEmpty());
			Assert.AssertEquals("20150825T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150826T000000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint5 --> negative 8.25 0-4
			double timePoint5 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T013000");
			result = schedule.getCoveringInterval(timePoint5);
			Assert.AssertEquals(false, result.isPositive);
			Assert.AssertEquals(false, result.interval.isEmpty());
			Assert.AssertEquals("20150825T000000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150825T040000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
		}
	
		public void testCalculateIntervalWithoutWhite() {
			Schedule schedule = new Schedule();
			RepetitiveInterval interval1 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 5, 10, 2,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval2 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 6, 8, 1,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
	
			schedule.addBlackInterval(interval1);
			schedule.addBlackInterval(interval2);
	
			Schedule.Result result;
	
			// timePoint1 --> negative 8.25 4-10
			double timePoint1 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T063000");
			result = schedule.getCoveringInterval(timePoint1);
			Assert.AssertEquals(false, result.isPositive);
			Assert.AssertEquals(false, result.interval.isEmpty());
			Assert.AssertEquals("20150825T050000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150825T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint2 --> negative 8.25 0-4
			double timePoint2 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T013000");
			result = schedule.getCoveringInterval(timePoint2);
			Assert.AssertEquals(false, result.isPositive);
			Assert.AssertEquals(false, result.interval.isEmpty());
			Assert.AssertEquals("20150825T000000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150826T000000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
		}
	
		// Convert the int array to a ByteBuffer.
		public static ByteBuffer toBuffer(int[] array) {
			ByteBuffer result = ILOG.J2CsMapping.NIO.ByteBuffer.allocate(array.Length);
			for (int i = 0; i < array.Length; ++i)
				result.put((byte) (array[i] & 0xff));
	
			result.flip();
			return result;
		}
	
		private static readonly ByteBuffer SCHEDULE = toBuffer(new int[] {
				0x8f,
				0xc4,// Schedule
				0x8d,
				0x90,// WhiteIntervalList
				/////
				0x8c,
				0x2e, // RepetitiveInterval
				0x86, 0x0f, 0x32, 0x30, 0x31, 0x35, 0x30, 0x38, 0x32, 0x35, 0x54,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x87, 0x0f, 0x32, 0x30,
				0x31,
				0x35,
				0x30,
				0x38,
				0x32,
				0x35,
				0x54,
				0x30,
				0x30,
				0x30,
				0x30,
				0x30,
				0x30,
				0x88,
				0x01,
				0x04,
				0x89,
				0x01,
				0x07,
				0x8a,
				0x01,
				0x00,
				0x8b,
				0x01,
				0x00,
				/////
				0x8c,
				0x2e, // RepetitiveInterval
				0x86, 0x0f, 0x32, 0x30, 0x31, 0x35, 0x30, 0x38, 0x32, 0x35, 0x54,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x87, 0x0f, 0x32, 0x30, 0x31,
				0x35, 0x30, 0x38, 0x32, 0x38, 0x54, 0x30, 0x30,
				0x30,
				0x30,
				0x30,
				0x30,
				0x88,
				0x01,
				0x05,
				0x89,
				0x01,
				0x0a,
				0x8a,
				0x01,
				0x02,
				0x8b,
				0x01,
				0x01,
				/////
				0x8c,
				0x2e, // RepetitiveInterval
				0x86, 0x0f, 0x32, 0x30, 0x31, 0x35, 0x30, 0x38, 0x32, 0x35, 0x54,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x87, 0x0f, 0x32, 0x30, 0x31,
				0x35, 0x30, 0x38, 0x32, 0x38, 0x54, 0x30, 0x30, 0x30, 0x30,
				0x30,
				0x30,
				0x88,
				0x01,
				0x06,
				0x89,
				0x01,
				0x08,
				0x8a,
				0x01,
				0x01,
				0x8b,
				0x01,
				0x01,
				/////
				0x8e,
				0x30, // BlackIntervalList
				/////
				0x8c,
				0x2e, // RepetitiveInterval
				0x86, 0x0f, 0x32, 0x30, 0x31, 0x35, 0x30, 0x38, 0x32, 0x37, 0x54,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x87, 0x0f, 0x32, 0x30, 0x31,
				0x35, 0x30, 0x38, 0x32, 0x37, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30,
				0x30, 0x88, 0x01, 0x07, 0x89, 0x01, 0x08, 0x8a, 0x01, 0x00, 0x8b,
				0x01, 0x00 });
	
		public void testEncodeAndDecode() {
			Schedule schedule = new Schedule();
	
			RepetitiveInterval interval1 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150828T000000"), 5, 10, 2,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval2 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150828T000000"), 6, 8, 1,
					net.named_data.jndn.encrypt.RepetitiveInterval.RepeatUnit.DAY);
			RepetitiveInterval interval3 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150827T000000"), 7, 8);
			RepetitiveInterval interval4 = new RepetitiveInterval(
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"),
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T000000"), 4, 7);
	
			schedule.addWhiteInterval(interval1);
			schedule.addWhiteInterval(interval2);
			schedule.addWhiteInterval(interval4);
			schedule.addBlackInterval(interval3);
	
			Blob encoding = schedule.wireEncode();
			Blob encoding2 = new Blob(SCHEDULE, false);
			Assert.AssertTrue(encoding.equals(encoding2));
	
			Schedule schedule2 = new Schedule();
			try {
				schedule2.wireDecode(encoding);
			} catch (EncodingException ex) {
				Assert.Fail("Error decoding Schedule: " + ex.Message);
			}
	
			Schedule.Result result;
	
			// timePoint1 --> positive 8.25 4-10
			double timePoint1 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150825T063000");
			result = schedule.getCoveringInterval(timePoint1);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150825T040000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150825T100000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
	
			// timePoint2 --> positive 8.26 6-8
			double timePoint2 = net.named_data.jndn.tests.unit_tests.UnitTestsCommon.fromIsoString("20150826T073000");
			result = schedule.getCoveringInterval(timePoint2);
			Assert.AssertEquals(true, result.isPositive);
			Assert.AssertEquals("20150826T060000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getStartTime()));
			Assert.AssertEquals("20150826T080000",
					net.named_data.jndn.tests.unit_tests.UnitTestsCommon.toIsoString(result.interval.getEndTime()));
		}
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}}
