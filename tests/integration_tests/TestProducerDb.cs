// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.integration_tests {
	
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.security;
	using net.named_data.jndn.util;
	
	public class TestProducerDb {
		public void setUp() {
			FileInfo policyConfigDirectory = net.named_data.jndn.tests.integration_tests.IntegrationTestsCommon
					.getPolicyConfigDirectory();
	
			databaseFilePath = new FileInfo(System.IO.Path.Combine(policyConfigDirectory.FullName,"test.db"));
			databaseFilePath.delete();
		}
	
		public void tearDown() {
			databaseFilePath.delete();
		}
	
		public void testDatabaseFunctions() {
			// Test construction.
			ProducerDb database = new Sqlite3ProducerDb(
					databaseFilePath.FullName);
	
			// Create member.
			AesKeyParams // Create member.
					paras = new AesKeyParams(128);
			Blob keyBlob1 = net.named_data.jndn.encrypt.algo.AesAlgorithm.generateKey(paras).getKeyBits();
			Blob keyBlob2 = net.named_data.jndn.encrypt.algo.AesAlgorithm.generateKey(paras).getKeyBits();
	
			double point1 = net.named_data.jndn.encrypt.Schedule.fromIsoString("20150101T100000");
			double point2 = net.named_data.jndn.encrypt.Schedule.fromIsoString("20150102T100000");
			double point3 = net.named_data.jndn.encrypt.Schedule.fromIsoString("20150103T100000");
			double point4 = net.named_data.jndn.encrypt.Schedule.fromIsoString("20150104T100000");
	
			// Add keys into the database.
			database.addContentKey(point1, keyBlob1);
			database.addContentKey(point2, keyBlob1);
			database.addContentKey(point3, keyBlob2);
	
			// Throw an exception when adding a key to an existing time slot.
			try {
				database.addContentKey(point1, keyBlob1);
				Assert.Fail("addContentKey did not throw an exception");
			} catch (ProducerDb.Error ex) {
			} catch (Exception ex_0) {
				Assert.Fail("addContentKey did not throw an exception");
			}
	
			// Check has functions.
			Assert.AssertEquals(true, database.hasContentKey(point1));
			Assert.AssertEquals(true, database.hasContentKey(point2));
			Assert.AssertEquals(true, database.hasContentKey(point3));
			Assert.AssertEquals(false, database.hasContentKey(point4));
	
			// Get content keys.
			Blob keyResult = database.getContentKey(point1);
			Assert.AssertTrue(keyResult.equals(keyBlob1));
	
			keyResult = database.getContentKey(point3);
			Assert.AssertTrue(keyResult.equals(keyBlob2));
	
			// Throw exception when there is no such time slot in the database.
			try {
				database.getContentKey(point4);
				Assert.Fail("getContentKey did not throw an exception");
			} catch (ProducerDb.Error ex_1) {
			} catch (Exception ex_2) {
				Assert.Fail("getContentKey did not throw an exception");
			}
	
			// Delete content keys.
			Assert.AssertEquals(true, database.hasContentKey(point1));
			database.deleteContentKey(point1);
			Assert.AssertEquals(false, database.hasContentKey(point1));
	
			// Delete at a non-existing time slot.
			try {
				database.deleteContentKey(point4);
			} catch (Exception ex_3) {
				Assert.Fail("deleteContentKey threw an exception");
			}
		}
	
		private FileInfo databaseFilePath;
	}
}
