// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.integration_tests {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util;
	
	public class TestValidationPolicyConfig {
		internal class TestValidationResult : DataValidationSuccessCallback,
				DataValidationFailureCallback,
				ValidationPolicy.ValidationContinuation {
			/// <summary>
			/// Create a TestValidationResult whose state_ will reference the given Data.
			/// </summary>
			///
			/// <param name="data">The Data packed for the state_, which must remain valid.</param>
			public TestValidationResult(Data data) {
				data_ = data;
				reset();
			}
	
			/// <summary>
			/// Reset all the results to false, to get ready for another result.
			/// </summary>
			///
			public void reset() {
				state_ = new DataValidationState(data_, this, this);
	
				calledSuccess_ = false;
				calledFailure_ = false;
				calledContinue_ = false;
			}
	
			/// <summary>
			/// Call reset() then call validator.checkPolicy to set this object's results.
			/// When finished, you can check calledSuccess_, etc.
			/// </summary>
			///
			/// <param name="validator">The ValidatorConfig for calling checkPolicy.</param>
			internal void checkPolicy(ValidatorConfig validator) {
				reset();
				validator.getPolicy().checkPolicy(data_, state_, this);
			}
	
			public virtual void successCallback(Data data) {
				calledSuccess_ = true;
			}
	
			public virtual void failureCallback(Data data, ValidationError error) {
				calledFailure_ = true;
			}
	
			public virtual void continueValidation(CertificateRequest certificateRequest,
					ValidationState state) {
				calledContinue_ = true;
			}
	
			public Data data_;
			public DataValidationState state_;
			public bool calledSuccess_;
			public bool calledFailure_;
			public bool calledContinue_;
		}
	
		public void setUp() {
			policyConfigDirectory_ = net.named_data.jndn.tests.integration_tests.IntegrationTestsCommon
					.getPolicyConfigDirectory();
		}
	
		internal FileInfo policyConfigDirectory_;
	
		public void testNameRelation() {
			// Set up the validators.
			CertificateFetcher fetcher = new CertificateFetcherOffline();
			ValidatorConfig validatorPrefix = new ValidatorConfig(fetcher);
			ValidatorConfig validatorEqual = new ValidatorConfig(fetcher);
			ValidatorConfig validatorStrict = new ValidatorConfig(fetcher);
	
			validatorPrefix.load(new FileInfo(System.IO.Path.Combine(policyConfigDirectory_.FullName,"relation_ruleset_prefix.conf")).FullName);
			validatorEqual.load(new FileInfo(System.IO.Path.Combine(policyConfigDirectory_.FullName,"relation_ruleset_equal.conf")).FullName);
			validatorStrict.load(new FileInfo(System.IO.Path.Combine(policyConfigDirectory_.FullName,"relation_ruleset_strict.conf")).FullName);
	
			// Set up a Data packet and result object.
			Data data = new Data();
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setType(
					net.named_data.jndn.KeyLocatorType.KEYNAME);
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/KEY/123"));
			TestValidationPolicyConfig.TestValidationResult  result = new TestValidationPolicyConfig.TestValidationResult (data);
	
			data.setName(new Name("/TestRule1"));
			result.checkPolicy(validatorPrefix);
			Assert.AssertTrue("Prefix relation should match prefix name",
					result.calledContinue_ && !result.calledFailure_);
			result.checkPolicy(validatorEqual);
			Assert.AssertTrue("Equal relation should match prefix name",
					result.calledContinue_ && !result.calledFailure_);
			result.checkPolicy(validatorStrict);
			Assert.AssertTrue("Strict-prefix relation should not match prefix name",
					result.calledFailure_ && !result.calledContinue_);
	
			data.setName(new Name("/TestRule1/hi"));
			result.checkPolicy(validatorPrefix);
			Assert.AssertTrue("Prefix relation should match longer name",
					result.calledContinue_ && !result.calledFailure_);
			result.checkPolicy(validatorEqual);
			Assert.AssertTrue("Equal relation should not match longer name",
					result.calledFailure_ && !result.calledContinue_);
			result.checkPolicy(validatorStrict);
			Assert.AssertTrue("Strict-prefix relation should match longer name",
					result.calledContinue_ && !result.calledFailure_);
	
			data.setName(new Name("/Bad/TestRule1/"));
			result.checkPolicy(validatorPrefix);
			Assert.AssertTrue("Prefix relation should not match inner components",
					result.calledFailure_ && !result.calledContinue_);
			result.checkPolicy(validatorEqual);
			Assert.AssertTrue("Equal relation should not match inner components",
					result.calledFailure_ && !result.calledContinue_);
			result.checkPolicy(validatorStrict);
			Assert.AssertTrue("Strict-prefix relation should  not match inner components",
					result.calledFailure_ && !result.calledContinue_);
		}
	
		public void testSimpleRegex() {
			// Set up the validator.
			CertificateFetcher fetcher = new CertificateFetcherOffline();
			ValidatorConfig validator = new ValidatorConfig(fetcher);
			validator.load(new FileInfo(System.IO.Path.Combine(policyConfigDirectory_.FullName,"regex_ruleset.conf")).FullName);
	
			// Set up a Data packet and result object.
			Data data = new Data();
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setType(
					net.named_data.jndn.KeyLocatorType.KEYNAME);
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/KEY/123"));
			TestValidationPolicyConfig.TestValidationResult  result = new TestValidationPolicyConfig.TestValidationResult (data);
	
			data.setName(new Name("/SecurityTestSecRule/Basic"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledContinue_ && !result.calledFailure_);
	
			data.setName(new Name("/SecurityTestSecRule/Basic/More"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
	
			data.setName(new Name("/SecurityTestSecRule/"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledContinue_ && !result.calledFailure_);
	
			data.setName(new Name("/SecurityTestSecRule/Other/TestData"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledContinue_ && !result.calledFailure_);
	
			data.setName(new Name("/Basic/Data"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
		}
	
		public void testHierarchical() {
			// Set up the validator.
			CertificateFetcher fetcher = new CertificateFetcherOffline();
			ValidatorConfig validator = new ValidatorConfig(fetcher);
			validator.load(new FileInfo(System.IO.Path.Combine(policyConfigDirectory_.FullName,"hierarchical_ruleset.conf")).FullName);
	
			// Set up a Data packet and result object.
			Data data = new Data();
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setType(
					net.named_data.jndn.KeyLocatorType.KEYNAME);
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/Basic/Longer/KEY/123"));
			TestValidationPolicyConfig.TestValidationResult  result = new TestValidationPolicyConfig.TestValidationResult (data);
	
			data.setName(new Name("/SecurityTestSecRule/Basic/Data1"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
	
			data.setName(new Name("/SecurityTestSecRule/Basic/Longer/Data2"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledContinue_ && !result.calledFailure_);
	
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/Basic/KEY/123"));
	
			data.setName(new Name("/SecurityTestSecRule/Basic/Data1"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledContinue_ && !result.calledFailure_);
	
			data.setName(new Name("/SecurityTestSecRule/Basic/Longer/Data2"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledContinue_ && !result.calledFailure_);
		}
	
		public void testHyperRelation() {
			// Set up the validator.
			CertificateFetcher fetcher = new CertificateFetcherOffline();
			ValidatorConfig validator = new ValidatorConfig(fetcher);
			validator.load(new FileInfo(System.IO.Path.Combine(policyConfigDirectory_.FullName,"hyperrelation_ruleset.conf")).FullName);
	
			// Set up a Data packet and result object.
			Data data = new Data();
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setType(
					net.named_data.jndn.KeyLocatorType.KEYNAME);
			TestValidationPolicyConfig.TestValidationResult  result = new TestValidationPolicyConfig.TestValidationResult (data);
	
			data.setName(new Name("/SecurityTestSecRule/Basic/Longer/Data2"));
	
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/Basic/Longer/KEY/123"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/Basic/KEY/123"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
	
			data.setName(new Name("/SecurityTestSecRule/Basic/Other/Data1"));
	
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/Basic/Longer/KEY/123"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
			net.named_data.jndn.KeyLocator.getFromSignature(data.getSignature()).setKeyName(
					new Name("/SecurityTestSecRule/Basic/KEY/123"));
			result.checkPolicy(validator);
			Assert.AssertTrue(result.calledFailure_ && !result.calledContinue_);
		}
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
