// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.integration_tests {
	
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.impl;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// InMemoryStorageFace extends Face to hold an InMemoryStoragePersistent and
	/// use it in expressInterest to instantly reply to an Interest. It also allows
	/// one simple call to registerPrefix to remember the OnInterestCallback. This
	/// also keeps a local DelayedCallTable (to use for callLater) so that you can
	/// call its setNowOffsetMilliseconds_ for testing.
	/// </summary>
	///
	public class InMemoryStorageFace : Face {
		/// <summary>
		/// Create an InMemoryStorageFace to use the given storage.
		/// </summary>
		///
		/// <param name="storage">calls onData, otherwise it immediately calls onTimeout.</param>
		public InMemoryStorageFace(InMemoryStoragePersistent storage) : base("localhost") {
			this.sentInterests_ = new ArrayList<Interest>();
			this.sentData_ = new ArrayList<Data>();
			this.interestFilterTable_ = new InterestFilterTable();
			this.delayedCallTable_ = new DelayedCallTable();
	
			storage_ = storage;
		}
	
		public override long expressInterest(Interest interest, OnData onData,
				OnTimeout onTimeout, OnNetworkNack onNetworkNack,
				WireFormat wireFormat) {
			ILOG.J2CsMapping.Collections.Collections.Add(sentInterests_,new Interest(interest));
	
			Data data = storage_.find(interest);
			if (data != null) {
				ILOG.J2CsMapping.Collections.Collections.Add(sentData_,new Data(data));
				onData.onData(interest, data);
			} else
				onTimeout.onTimeout(interest);
	
			return 0;
		}
	
		public override long registerPrefix(Name prefix, OnInterestCallback onInterest,
				OnRegisterFailed onRegisterFailed,
				OnRegisterSuccess onRegisterSuccess, ForwardingFlags flags,
				WireFormat wireFormat) {
			interestFilterTable_.setInterestFilter(0, new InterestFilter(prefix),
					onInterest, this);
	
			if (onRegisterSuccess != null)
				onRegisterSuccess.onRegisterSuccess(prefix, 0);
			return 0;
		}
	
		public override void putData(Data data, WireFormat wireFormat) {
			ILOG.J2CsMapping.Collections.Collections.Add(sentData_,new Data(data));
		}
	
		public override void callLater(double delayMilliseconds, IRunnable callback) {
			delayedCallTable_.callLater(delayMilliseconds, callback);
		}
	
		public override void processEvents() {
			delayedCallTable_.callTimedOut();
		}
	
		/// <summary>
		/// If registerPrefix has been called and the Interest matches the saved
		/// registeredPrefix_, call the saved registeredOnInterest_.
		/// </summary>
		///
		/// <param name="interest"></param>
		public void receive(Interest interest) {
			ArrayList matchedFilters = new ArrayList();
			interestFilterTable_.getMatchedFilters(interest, matchedFilters);
			for (int i = 0; i < matchedFilters.Count; ++i) {
				InterestFilterTable.Entry entry = (InterestFilterTable.Entry) matchedFilters[i];
				entry.getOnInterest().onInterest(entry.getFilter().getPrefix(),
						interest, entry.getFace(), entry.getInterestFilterId(),
						entry.getFilter());
			}
		}
	
		public readonly ArrayList<Interest> sentInterests_;
		public readonly ArrayList<Data> sentData_;
	
		private readonly InterestFilterTable interestFilterTable_;
		// Use delayedCallTable_ here so that we can call setNowOffsetMilliseconds_().
		public readonly DelayedCallTable delayedCallTable_;
		private readonly InMemoryStoragePersistent storage_;
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
