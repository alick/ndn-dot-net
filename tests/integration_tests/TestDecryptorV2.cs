// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.integration_tests {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.pib;
	using net.named_data.jndn.security.tpm;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util;
	
	public class TestDecryptorV2 {
		public sealed class Anonymous_C3 : 			DecryptorV2.DecryptSuccessCallback {
			private readonly int[] nSuccesses;
	
			public Anonymous_C3(int[] nSuccesses_0) {
				this.nSuccesses = nSuccesses_0;
			}
	
			public void onSuccess(Blob plainData) {
				++nSuccesses[0];
				Assert.AssertEquals(15, plainData.size());
				Assert.AssertTrue(plainData
						.equals(new Blob("Data to encrypt")));
			}
		}
	
		public sealed class Anonymous_C2 : EncryptError.OnError {
			private readonly int[] nFailures;
	
			public Anonymous_C2(int[] nFailures_0) {
				this.nFailures = nFailures_0;
			}
	
			public void onError(EncryptError.ErrorCode errorCode,
					String message) {
				System.Console.Out.WriteLine("Debug onError " + message);
				++nFailures[0];
			}
		}
	
		public sealed class Anonymous_C1 : 			DecryptorV2.DecryptSuccessCallback {
			private readonly int[] nSuccesses;
	
			public Anonymous_C1(int[] nSuccesses_0) {
				this.nSuccesses = nSuccesses_0;
			}
	
			public void onSuccess(Blob plainData) {
				++nSuccesses[0];
			}
		}
	
		public sealed class Anonymous_C0 : EncryptError.OnError {
			private readonly int[] nFailures;
	
			public Anonymous_C0(int[] nFailures_0) {
				this.nFailures = nFailures_0;
			}
	
			public void onError(EncryptError.ErrorCode errorCode,
					String message) {
				++nFailures[0];
			}
		}
	
		internal class DecryptorFixture : IdentityManagementFixture {
			public DecryptorFixture(Name identityName) {
				this.storage_ = new InMemoryStoragePersistent();
				/* foreach */
				// Include the code here from the NAC unit-tests class
				// DecryptorStaticDataEnvironment instead of making it a base class.
				foreach (ByteBuffer buffer  in  net.named_data.jndn.tests.integration_tests.EncryptStaticData.managerPackets) {
					Data data = new Data();
					data.wireDecode(buffer);
					storage_.insert(data);
				}
	
				/* foreach */
				foreach (ByteBuffer buffer_0  in  net.named_data.jndn.tests.integration_tests.EncryptStaticData.encryptorPackets) {
					Data data_1 = new Data();
					data_1.wireDecode(buffer_0);
					storage_.insert(data_1);
				}
	
				// Import the "/first/user" identity.
				keyChain_.importSafeBag(
						new SafeBag(net.named_data.jndn.tests.integration_tests.EncryptStaticData.userIdentity), new Blob(
								"password").buf());
	
				addIdentity(new Name("/not/authorized"));
	
				face_ = new InMemoryStorageFace(storage_);
				validator_ = new ValidatorNull();
				decryptor_ = new DecryptorV2(keyChain_.getPib()
						.getIdentity(identityName).getDefaultKey(), validator_,
						keyChain_, face_);
			}
	
			public readonly InMemoryStoragePersistent storage_;
			public readonly InMemoryStorageFace face_;
			public readonly ValidatorNull validator_;
			public readonly DecryptorV2 decryptor_;
		}
	
		public void testDecryptValid() {
			TestDecryptorV2.DecryptorFixture  fixture = new TestDecryptorV2.DecryptorFixture (new Name("/first/user"));
	
			EncryptedContent encryptedContent = new EncryptedContent();
			encryptedContent.wireDecodeV2(net.named_data.jndn.tests.integration_tests.EncryptStaticData.encryptedBlobs[0]);
	
			int[] nSuccesses_0 = new int[] { 0 };
			int[] nFailures_1 = new int[] { 0 };
			fixture.decryptor_.decrypt(encryptedContent,
					new TestDecryptorV2.Anonymous_C3 (nSuccesses_0), new TestDecryptorV2.Anonymous_C2 (nFailures_1));
	
			Assert.AssertEquals(1, nSuccesses_0[0]);
			Assert.AssertEquals(0, nFailures_1[0]);
		}
	
		public void testDecryptInvalid() {
			TestDecryptorV2.DecryptorFixture  fixture = new TestDecryptorV2.DecryptorFixture (new Name(
					"/not/authorized"));
	
			EncryptedContent encryptedContent = new EncryptedContent();
			encryptedContent.wireDecodeV2(net.named_data.jndn.tests.integration_tests.EncryptStaticData.encryptedBlobs[0]);
	
			int[] nSuccesses_0 = new int[] { 0 };
			int[] nFailures_1 = new int[] { 0 };
			fixture.decryptor_.decrypt(encryptedContent,
					new TestDecryptorV2.Anonymous_C1 (nSuccesses_0), new TestDecryptorV2.Anonymous_C0 (nFailures_1));
	
			Assert.AssertEquals(0, nSuccesses_0[0]);
			Assert.AssertEquals(1, nFailures_1[0]);
		}
	}
}
