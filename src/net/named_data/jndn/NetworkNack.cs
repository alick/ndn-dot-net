// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2016-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.lp;
	
	/// <summary>
	/// NetworkNack represents a network Nack packet and includes a Nack reason.
	/// </summary>
	///
	public class NetworkNack {
		public NetworkNack() {
			this.reason_ = net.named_data.jndn.NetworkNack.Reason.NONE;
			this.otherReasonCode_ = -1;
		}
		/// <summary>
		/// A NetworkNack.Reason specifies the reason in a NetworkNack packet. If the
		/// reason code in the packet is not a recognized enum value, then we use
		/// Reason.OTHER_CODE and you can call getOtherReasonCode(). We do this to keep
		/// the recognized reason values independent of packet encoding formats.
		/// </summary>
		///
		public enum Reason {
			NONE, CONGESTION, DUPLICATE, NO_ROUTE, OTHER_CODE	}
	
		/// <summary>
		/// Get the network Nack reason.
		/// </summary>
		///
		/// <returns>The reason enum value. If this is Reason.OTHER_CODE, then call
		/// getOtherReasonCode() to get the unrecognized reason code.</returns>
		public NetworkNack.Reason  getReason() {
			return reason_;
		}
	
		/// <summary>
		/// Get the reason code from the packet which is other than a recognized
		/// Reason enum value. This is only meaningful if getReason() is
		/// Reason.OTHER_CODE.
		/// </summary>
		///
		/// <returns>The reason code.</returns>
		public int getOtherReasonCode() {
			return otherReasonCode_;
		}
	
		/// <summary>
		/// Set the network Nack reason.
		/// </summary>
		///
		/// <param name="reason">setOtherReasonCode().</param>
		public void setReason(NetworkNack.Reason  reason) {
			reason_ = reason;
		}
	
		/// <summary>
		/// Set the packet's reason code to use when the reason enum is
		/// Reason.OTHER_CODE. If the packet's reason code is a recognized enum value,
		/// just call setReason().
		/// </summary>
		///
		/// <param name="otherReasonCode"></param>
		public void setOtherReasonCode(int otherReasonCode) {
			if (otherReasonCode < 0)
				throw new Exception(
						"NetworkNack other reason code must be non-negative");
			otherReasonCode_ = otherReasonCode;
		}
	
		/// <summary>
		/// Get the first header field in lpPacket which is a NetworkNack. This is
		/// an internal method which the application normally would not use.
		/// </summary>
		///
		/// <param name="lpPacket">The LpPacket with the header fields to search.</param>
		/// <returns>The first NetworkNack header field, or null if not found.</returns>
		static public NetworkNack getFirstHeader(LpPacket lpPacket) {
			for (int i = 0; i < lpPacket.countHeaderFields(); ++i) {
				Object field = lpPacket.getHeaderField(i);
				if (field  is  NetworkNack)
					return (NetworkNack) field;
			}
	
			return null;
		}
	
		private NetworkNack.Reason  reason_;
		private int otherReasonCode_;
	}
}
