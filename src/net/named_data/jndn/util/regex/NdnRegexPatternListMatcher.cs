// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.util.regex {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	public class NdnRegexPatternListMatcher : NdnRegexMatcherBase {
		public NdnRegexPatternListMatcher(String expr,
				NdnRegexBackrefManager backrefManager) : base(expr, net.named_data.jndn.util.regex.NdnRegexMatcherBase.NdnRegexExprType.PATTERN_LIST, backrefManager) {
			compile();
		}
	
		protected internal override void compile() {
			int len = expr_.Length;
			int[] index = new int[] { 0 };
			int subHead = index[0];
	
			while (index[0] < len) {
				subHead = index[0];
	
				if (!extractPattern(subHead, index))
					throw new NdnRegexMatcherBase.Error("Compile error");
			}
		}
	
		private bool extractPattern(int index, int[] next) {
			int start = index;
			int end = index;
			int indicator = index;
	
			if (expr_[index] == '(') {
				++index;
				index = extractSubPattern('(', ')', index);
				indicator = index;
				end = extractRepetition(index);
				if (indicator == end) {
					NdnRegexMatcherBase matcher = new NdnRegexBackrefMatcher(
							expr_.Substring(start,(end)-(start)), backrefManager_);
					backrefManager_.pushRef(matcher);
					((NdnRegexBackrefMatcher) matcher).lateCompile();
	
					ILOG.J2CsMapping.Collections.Collections.Add(matchers_,matcher);
				} else
					ILOG.J2CsMapping.Collections.Collections.Add(matchers_,new NdnRegexRepeatMatcher(expr_.Substring(start,(end)-(start)), backrefManager_, indicator - start));
			} else if (expr_[index] == '<') {
				++index;
				index = extractSubPattern('<', '>', index);
				indicator = index;
				end = extractRepetition(index);
				ILOG.J2CsMapping.Collections.Collections.Add(matchers_,new NdnRegexRepeatMatcher(
									expr_.Substring(start,(end)-(start)), backrefManager_, indicator
											- start));
			} else if (expr_[index] == '[') {
				++index;
				index = extractSubPattern('[', ']', index);
				indicator = index;
				end = extractRepetition(index);
				ILOG.J2CsMapping.Collections.Collections.Add(matchers_,new NdnRegexRepeatMatcher(
									expr_.Substring(start,(end)-(start)), backrefManager_, indicator
											- start));
			} else
				throw new NdnRegexMatcherBase.Error("Unexpected syntax");
	
			next[0] = end;
	
			return true;
		}
	
		private int extractSubPattern(char left, char right, int index) {
			int lcount = 1;
			int rcount = 0;
	
			while (lcount > rcount) {
				if (index >= expr_.Length)
					throw new NdnRegexMatcherBase.Error("Parenthesis mismatch");
	
				if (left == expr_[index])
					lcount++;
	
				if (right == expr_[index])
					rcount++;
	
				++index;
			}
	
			return index;
		}
	
		private int extractRepetition(int index) {
			int exprSize = expr_.Length;
	
			if (index == exprSize)
				return index;
	
			if ('+' == expr_[index] || '?' == expr_[index]
					|| '*' == expr_[index])
				return ++index;
	
			if ('{' == expr_[index]) {
				while ('}' != expr_[index]) {
					index++;
					if (index == exprSize)
						break;
				}
				if (index == exprSize)
					throw new NdnRegexMatcherBase.Error(
							"Missing right brace bracket");
				else
					return ++index;
			} else
				return index;
		}
	}
}
