// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2016 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// The Link class extends Data and represents a Link instance where the Data
	/// content is an encoded delegation set. The format is defined in "link.pdf"
	/// attached to Redmine issue http://redmine.named-data.net/issues/2587 .
	/// </summary>
	///
	public class Link : Data {
		/// <summary>
		/// Create a Link with default values and where the list of delegations is
		/// empty and the meta info type is LINK.
		/// </summary>
		///
		public Link() : base() {
			this.delegations_ = new DelegationSet();
	
			getMetaInfo().setType(net.named_data.jndn.ContentType.LINK);
		}
	
		/// <summary>
		/// Create a Link with the given name and default values and where the list of
		/// delegations is empty and the meta info type is LINK.
		/// </summary>
		///
		/// <param name="name">The name which is copied.</param>
		public Link(Name name) : base(name) {
			this.delegations_ = new DelegationSet();
	
			getMetaInfo().setType(net.named_data.jndn.ContentType.LINK);
		}
	
		/// <summary>
		/// Create a Link, copying values from the other Data object. If the content
		/// can be decoded using the default wire encoding, then update the list
		/// of delegations.
		/// </summary>
		///
		/// <param name="data">The Data object to copy values from.</param>
		public Link(Data data) : base(data) {
			this.delegations_ = new DelegationSet();
	
			if (!getContent().isNull()) {
				try {
					delegations_.wireDecode(getContent());
					getMetaInfo().setType(net.named_data.jndn.ContentType.LINK);
				} catch (EncodingException ex) {
					delegations_.clear();
				}
			}
		}
	
		/// <summary>
		/// Override to call the base class wireDecode then populate the list of
		/// delegations from the content.
		/// </summary>
		///
		/// <param name="input">The input byte array to be decoded as an immutable Blob.</param>
		/// <param name="wireFormat">A WireFormat object used to decode the input.</param>
		public override void wireDecode(Blob input, WireFormat wireFormat) {
			base.wireDecode(input,wireFormat);
			if (getMetaInfo().getType() != net.named_data.jndn.ContentType.LINK)
				throw new EncodingException(
						"Link.wireDecode: MetaInfo ContentType is not LINK.");
	
			delegations_.wireDecode(getContent());
		}
	
		/// <summary>
		/// Add a new delegation to the list of delegations, sorted by
		/// preference number then by name. Re-encode this object's content using the
		/// given wireFormat.
		/// </summary>
		///
		/// <param name="preference">The preference number.</param>
		/// <param name="name"></param>
		/// <param name="wireFormat">A WireFormat object used to encode the DelegationSet.</param>
		/// <returns>This Link so that you can chain calls to update values.</returns>
		public Link addDelegation(int preference, Name name,
				WireFormat wireFormat) {
			delegations_.add(preference, name);
			encodeContent(wireFormat);
	
			return this;
		}
	
		/// <summary>
		/// Add a new delegation to the list of delegations, sorted by
		/// preference number then by name. Re-encode this object's content using the
		/// default wire format.
		/// </summary>
		///
		/// <param name="preference">The preference number.</param>
		/// <param name="name"></param>
		/// <returns>This Link so that you can chain calls to update values.</returns>
		public Link addDelegation(int preference, Name name) {
			return addDelegation(preference, name,
					net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Remove every delegation with the given name. Re-encode this object's
		/// content using the given wireFormat.
		/// </summary>
		///
		/// <param name="name">Then name to match the name of the delegation(s) to be removed.</param>
		/// <param name="wireFormat">A WireFormat object used to encode the DelegationSet.</param>
		/// <returns>True if a delegation was removed, otherwise false.</returns>
		public bool removeDelegation(Name name, WireFormat wireFormat) {
			bool wasRemoved = delegations_.remove(name);
			if (wasRemoved)
				encodeContent(wireFormat);
	
			return wasRemoved;
		}
	
		/// <summary>
		/// Remove every delegation with the given name. Re-encode this object's
		/// content using the default wire format.
		/// </summary>
		///
		/// <param name="name">Then name to match the name of the delegation(s) to be removed.</param>
		/// <returns>True if a delegation was removed, otherwise false.</returns>
		public bool removeDelegation(Name name) {
			return removeDelegation(name, net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Get the list of delegation for read only.
		/// </summary>
		///
		/// <returns>The list of delegation, which you should treat as read-only. To
		/// modify it, call Link.addDelegation, etc.</returns>
		public DelegationSet getDelegations() {
			return delegations_;
		}
	
		/// <summary>
		/// Encode the delegations_ and set this object's content. Also set the
		/// meta info content type to LINK.
		/// </summary>
		///
		/// <param name="wireFormat">A WireFormat object used to encode the DelegationSet.</param>
		private void encodeContent(WireFormat wireFormat) {
			setContent(delegations_.wireEncode(wireFormat));
			getMetaInfo().setType(net.named_data.jndn.ContentType.LINK);
		}
	
		private readonly DelegationSet delegations_;
	}
}
