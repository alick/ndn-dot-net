// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2013-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// A Signature is an abstract base class providing methods to work with the
	/// signature information in a Data packet.
	/// You must create an object of a subclass, for example Sha256WithRsaSignature.
	/// </summary>
	///
	public abstract class Signature : ChangeCountable {
		/// <summary>
		/// Return a new Signature which is a deep copy of this signature.
		/// This is abstract, the subclass must implement it.
		/// </summary>
		///
		/// <returns>A new Sha256WithRsaSignature.</returns>
		/// <exception cref="System.Exception"></exception>
		public abstract Object Clone();
	
		/// <summary>
		/// Get the signature bytes.
		/// </summary>
		///
		/// <returns>The signature bytes. If not specified, the value isNull().</returns>
		public abstract Blob getSignature();
	
		/// <summary>
		/// Set the signature bytes to the given value.
		/// </summary>
		///
		/// <param name="signature">A Blob with the signature bytes.</param>
		public abstract void setSignature(Blob signature);
	
		/// <summary>
		/// Get the change count, which is incremented each time this object
		/// (or a child object) is changed.
		/// </summary>
		///
		/// <returns>The change count.</returns>
		public abstract long getChangeCount();
	}
}
