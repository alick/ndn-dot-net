// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2016 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.encrypt {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// ConsumerDb is an abstract base class the storage of decryption keys for the
	/// consumer. A subclass must implement the methods. For example, see
	/// Sqlite3ConsumerDb.
	/// </summary>
	///
	/// @note This class is an experimental feature. The API may change.
	public abstract class ConsumerDb {
		/// <summary>
		/// ConsumerDb.Error extends Exception for errors using ConsumerDb methods.
		/// Note that even though this is called "Error" to be consistent with the
		/// other libraries, it extends the Java Exception class, not Error.
		/// </summary>
		///
		[Serializable]
		public class Error : Exception {
			public Error(String message) : base(message) {
			}
		}
	
		/// <summary>
		/// Get the key with keyName from the database.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		/// <returns>A Blob with the encoded key, or an isNull Blob if cannot find the
		/// key with keyName.</returns>
		/// <exception cref="ConsumerDb.Error">for a database error.</exception>
		public abstract Blob getKey(Name keyName);
	
		/// <summary>
		/// Add the key with keyName and keyBlob to the database.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		/// <param name="keyBlob">The encoded key.</param>
		/// <exception cref="ConsumerDb.Error">if a key with the same keyName already exists inthe database, or other database error.</exception>
		public abstract void addKey(Name keyName, Blob keyBlob);
	
		/// <summary>
		/// Delete the key with keyName from the database. If there is no key with
		/// keyName, do nothing.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		/// <exception cref="ConsumerDb.Error">for a database error.</exception>
		public abstract void deleteKey(Name keyName);
	}
}
