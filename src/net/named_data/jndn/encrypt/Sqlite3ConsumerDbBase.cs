// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 12/23/15 3:55 PM    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.encrypt {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Sqlite3ConsumerDbBase is a base class the storage of decryption keys for the
	/// consumer. A subclass must implement the methods. For example, see
	/// Sqlite3ConsumerDb. This base class has protected SQL strings and helpers so
	/// the subclasses can work with similar tables using their own SQLite libraries.
	/// </summary>
	///
	/// @note This class is an experimental feature. The API may change.
	public abstract class Sqlite3ConsumerDbBase : ConsumerDb {
		protected internal const String INITIALIZATION1 = "CREATE TABLE IF NOT EXISTS                         \n"
				+ "  decryptionkeys(                                  \n"
				+ "    key_id              INTEGER PRIMARY KEY,       \n"
				+ "    key_name            BLOB NOT NULL,             \n"
				+ "    key_buf             BLOB NOT NULL              \n"
				+ "  );                                               \n";
		protected internal const String INITIALIZATION2 = "CREATE UNIQUE INDEX IF NOT EXISTS                  \n"
				+ "   KeyNameIndex ON decryptionkeys(key_name);       \n";
	
		protected internal const String SELECT_getKey = "SELECT key_buf FROM decryptionkeys WHERE key_name=?";
		protected internal const String INSERT_addKey = "INSERT INTO decryptionkeys(key_name, key_buf) values (?, ?)";
		protected internal const String DELETE_deleteKey = "DELETE FROM decryptionkeys WHERE key_name=?";
	}
}
