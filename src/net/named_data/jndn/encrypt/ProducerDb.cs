// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.encrypt {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// ProducerDb is an abstract base class for the storage of keys for the producer. It
	/// contains one table that maps time slots (to the nearest hour) to the content
	/// key created for that time slot. A subclass must implement the methods. For
	/// example, see Sqlite3ProducerDb.
	/// </summary>
	///
	/// @note This class is an experimental feature. The API may change.
	public abstract class ProducerDb {
		/// <summary>
		/// ProducerDb.Error extends Exception for errors using ProducerDb methods.
		/// Note that even though this is called "Error" to be consistent with the
		/// other libraries, it extends the Java Exception class, not Error.
		/// </summary>
		///
		[Serializable]
		public class Error : Exception {
			public Error(String message) : base(message) {
			}
		}
	
		/// <summary>
		/// Check if a content key exists for the hour covering timeSlot.
		/// </summary>
		///
		/// <param name="timeSlot">The time slot as milliseconds since Jan 1, 1970 UTC.</param>
		/// <returns>True if there is a content key for timeSlot.</returns>
		/// <exception cref="ProducerDb.Error">for a database error.</exception>
		public abstract bool hasContentKey(double timeSlot);
	
		/// <summary>
		/// Get the content key for the hour covering timeSlot.
		/// </summary>
		///
		/// <param name="timeSlot">The time slot as milliseconds since Jan 1, 1970 UTC.</param>
		/// <returns>A Blob with the encoded key.</returns>
		/// <exception cref="ProducerDb.Error">if there is no key covering timeSlot or otherdatabase error.</exception>
		public abstract Blob getContentKey(double timeSlot);
	
		/// <summary>
		/// Add key as the content key for the hour covering timeSlot.
		/// </summary>
		///
		/// <param name="timeSlot">The time slot as milliseconds since Jan 1, 1970 UTC.</param>
		/// <param name="key">The encoded key.</param>
		/// <exception cref="ProducerDb.Error">if a key for the same hour already exists in thedatabase, or other database error.</exception>
		public abstract void addContentKey(double timeSlot, Blob key);
	
		/// <summary>
		/// Delete the content key for the hour covering timeSlot. If there is no key
		/// for the time slot, do nothing.
		/// </summary>
		///
		/// <param name="timeSlot">The time slot as milliseconds since Jan 1, 1970 UTC.</param>
		/// <exception cref="ProducerDb.Error">for a database error.</exception>
		public abstract void deleteContentKey(double timeSlot);
	
		/// <summary>
		/// Get the hour-based time slot.
		/// </summary>
		///
		/// <param name="timeSlot">The time slot as milliseconds since Jan 1, 1970 UTC.</param>
		/// <returns>The hour-based time slot as hours since Jan 1, 1970 UTC.</returns>
		protected static internal int getFixedTimeSlot(double timeSlot) {
			return (int) Math.Floor(Math.Round(timeSlot,MidpointRounding.AwayFromZero) / 3600000.0d);
		}
	}
}
