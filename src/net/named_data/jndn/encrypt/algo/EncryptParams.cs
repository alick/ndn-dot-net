// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.encrypt.algo {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// An EncryptParams holds an algorithm type and other parameters used to
	/// encrypt and decrypt.
	/// </summary>
	///
	/// @note This class is an experimental feature. The API may change.
	public class EncryptParams {
		/// <summary>
		/// Create an EncryptParams with the given parameters.
		/// </summary>
		///
		/// <param name="algorithmType">The algorithm type, or null if not specified.</param>
		/// <param name="initialVectorLength"></param>
		public EncryptParams(EncryptAlgorithmType algorithmType,
				int initialVectorLength) {
			algorithmType_ = algorithmType;
	
			if (initialVectorLength > 0) {
				ByteBuffer initialVector = ILOG.J2CsMapping.NIO.ByteBuffer.allocate(initialVectorLength);
				net.named_data.jndn.util.Common.getRandom().nextBytes(initialVector.array());
				initialVector_ = new Blob(initialVector, false);
			} else
				initialVector_ = new Blob();
		}
	
		/// <summary>
		/// Create an EncryptParams with the given algorithmType and an unspecified
		/// initial vector.
		/// </summary>
		///
		/// <param name="algorithmType">The algorithm type, or null if not specified.</param>
		public EncryptParams(EncryptAlgorithmType algorithmType) {
			algorithmType_ = algorithmType;
			initialVector_ = new Blob();
		}
	
		/// <summary>
		/// Get the algorithm type.
		/// </summary>
		///
		/// <returns>The algorithm type, or null if not specified.</returns>
		public EncryptAlgorithmType getAlgorithmType() {
			return algorithmType_;
		}
	
		/// <summary>
		/// Get the initial vector.
		/// </summary>
		///
		/// <returns>The initial vector. If not specified, isNull() is true.</returns>
		public Blob getInitialVector() {
			return initialVector_;
		}
	
		/// <summary>
		/// Set the algorithm type.
		/// </summary>
		///
		/// <param name="algorithmType">The algorithm type. If not specified, set to null.</param>
		/// <returns>This EncryptParams so that you can chain calls to update values.</returns>
		public EncryptParams setAlgorithmType(
				EncryptAlgorithmType algorithmType) {
			algorithmType_ = algorithmType;
			return this;
		}
	
		/// <summary>
		/// Set the initial vector.
		/// </summary>
		///
		/// <param name="initialVector"></param>
		/// <returns>This EncryptParams so that you can chain calls to update values.</returns>
		public EncryptParams setInitialVector(Blob initialVector) {
			initialVector_ = ((initialVector == null) ? new Blob() : initialVector);
			return this;
		}
	
		private EncryptAlgorithmType algorithmType_;
		private Blob initialVector_;
	}
}
