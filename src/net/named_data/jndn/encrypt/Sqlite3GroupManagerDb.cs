// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2016 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.encrypt {
	
	using ILOG.J2CsMapping.Util.Logging;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.Data.SqlClient;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// Sqlite3GroupManagerDb extends GroupManagerDb to implement the storage of
	/// data used by the GroupManager using SQLite3.
	/// </summary>
	///
	/// @note This class is an experimental feature. The API may change.
	public class Sqlite3GroupManagerDb : Sqlite3GroupManagerDbBase {
		/// <summary>
		/// Create an Sqlite3GroupManagerDb to use the given SQLite3 file.
		/// </summary>
		///
		/// <param name="databaseFilePath">The path of the SQLite file.</param>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public Sqlite3GroupManagerDb(String databaseFilePath) {
			this.database_ = null;
			try {
				ILOG.J2CsMapping.Reflect.Helper.GetNativeType("org.sqlite.JDBC");
			} catch (TypeLoadException ex) {
				// We don't expect this to happen.
				ILOG.J2CsMapping.Util.Logging.Logger.getLogger(typeof(Sqlite3GroupManagerDb).FullName).log(
						ILOG.J2CsMapping.Util.Logging.Level.SEVERE, null, ex);
				return;
			}
	
			try {
				database_ = System.Data.SqlClient.DriverManager.getConnection("jdbc:sqlite:"
						+ databaseFilePath);
	
				SqlCommand statement = database_.CreateCommand();
				// Use "try/finally instead of "try-with-resources" or "using" which are
				// not supported before Java 7.
				try {
					// Enable foreign keys.
					statement.executeUpdate(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.PRAGMA_foreign_keys);
	
					// Initialize database-specific tables.
					statement.executeUpdate(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.INITIALIZATION1);
					statement.executeUpdate(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.INITIALIZATION2);
					statement.executeUpdate(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.INITIALIZATION3);
					statement.executeUpdate(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.INITIALIZATION4);
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb: SQLite error: " + exception);
			}
		}
	
		////////////////////////////////////////////////////// Schedule management.
	
		/// <summary>
		/// Check if there is a schedule with the given name.
		/// </summary>
		///
		/// <param name="name">The name of the schedule.</param>
		/// <returns>True if there is a schedule.</returns>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override bool hasSchedule(String name) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_hasSchedule);
				statement.setString(1, name);
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					if (result.NextResult())
						return true;
					else
						return false;
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.hasSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// List all the names of the schedules.
		/// </summary>
		///
		/// <returns>A new List of String with the names of all schedules. (Use List
		/// without generics so it works with older Java compilers.)</returns>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override IList listAllScheduleNames() {
			IList list = new ArrayList();
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_listAllScheduleNames);
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					while (result.NextResult())
						ILOG.J2CsMapping.Collections.Collections.Add(list,result.getString(1));
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.listAllScheduleNames: SQLite error: "
								+ exception);
			}
	
			return list;
		}
	
		/// <summary>
		/// Get a schedule with the given name.
		/// </summary>
		///
		/// <param name="name">The name of the schedule.</param>
		/// <returns>A new Schedule object.</returns>
		/// <exception cref="GroupManagerDb.Error">if the schedule does not exist or otherdatabase error.</exception>
		public override Schedule getSchedule(String name) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_getSchedule);
				statement.setString(1, name);
	
				Schedule schedule = new Schedule();
				try {
					SqlDataReader result = statement.executeQuery();
	
					if (result.NextResult()) {
						try {
							schedule.wireDecode(new Blob(result.getBytes(1), false));
						} catch (EncodingException ex) {
							// We don't expect this to happen.
							throw new GroupManagerDb.Error(
									"Sqlite3GroupManagerDb.getSchedule: Error decoding schedule: "
											+ ex);
						}
					} else
						throw new GroupManagerDb.Error(
								"Sqlite3GroupManagerDb.getSchedule: Cannot get the result from the database");
				} finally {
					statement.close();
				}
	
				return schedule;
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.getSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// For each member using the given schedule, get the name and public key DER
		/// of the member's key.
		/// </summary>
		///
		/// <param name="name">The name of the schedule.</param>
		/// <returns>a new Map where the map's key is the Name of the public key and the
		/// value is the Blob of the public key DER. (Use Map without generics so it
		/// works with older Java compilers.) Note that the member's identity name is
		/// keyName.getPrefix(-1). If the schedule name is not found, the map is empty.</returns>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override IDictionary getScheduleMembers(String name) {
			IDictionary map = new Hashtable();
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_getScheduleMembers);
				statement.setString(1, name);
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					while (result.NextResult()) {
						Name keyName = new Name();
						try {
							keyName.wireDecode(new Blob(result.getBytes(1), false),
									net.named_data.jndn.encoding.TlvWireFormat.get());
						} catch (EncodingException ex) {
							// We don't expect this to happen.
							throw new GroupManagerDb.Error(
									"Sqlite3GroupManagerDb.getScheduleMembers: Error decoding name: "
											+ ex);
						}
	
						ILOG.J2CsMapping.Collections.Collections.Put(map,keyName,new Blob(result.getBytes(2), false));
					}
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.getScheduleMembers: SQLite error: "
								+ exception);
			}
	
			return map;
		}
	
		/// <summary>
		/// Add a schedule with the given name.
		/// </summary>
		///
		/// <param name="name">The name of the schedule. The name cannot be empty.</param>
		/// <param name="schedule">The Schedule to add.</param>
		/// <exception cref="GroupManagerDb.Error">if a schedule with the same name already exists,if the name is empty, or other database error.</exception>
		public override void addSchedule(String name, Schedule schedule) {
			net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.checkAddSchedule(name);
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.INSERT_addSchedule);
				statement.setString(1, name);
				statement.setBytes(2, schedule.wireEncode().getImmutableArray());
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.addSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Delete the schedule with the given name. Also delete members which use this
		/// schedule. If there is no schedule with the name, then do nothing.
		/// </summary>
		///
		/// <param name="name">The name of the schedule.</param>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override void deleteSchedule(String name) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.DELETE_deleteSchedule);
				statement.setString(1, name);
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.deleteSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Rename a schedule with oldName to newName.
		/// </summary>
		///
		/// <param name="oldName">The name of the schedule to be renamed.</param>
		/// <param name="newName">The new name of the schedule. The name cannot be empty.</param>
		/// <exception cref="GroupManagerDb.Error">If a schedule with newName already exists, ifthe schedule with oldName does not exist, if newName is empty, or otherdatabase error.</exception>
		public override void renameSchedule(String oldName, String newName) {
			net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.checkRenameSchedule(newName);
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.UPDATE_renameSchedule);
				statement.setString(1, newName);
				statement.setString(2, oldName);
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.renameSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Update the schedule with name and replace the old object with the given
		/// schedule. Otherwise, if no schedule with name exists, a new schedule
		/// with name and the given schedule will be added to database.
		/// </summary>
		///
		/// <param name="name">The name of the schedule. The name cannot be empty.</param>
		/// <param name="schedule">The Schedule to update or add.</param>
		/// <exception cref="GroupManagerDb.Error">if the name is empty, or other database error.</exception>
		public override void updateSchedule(String name, Schedule schedule) {
			if (!hasSchedule(name)) {
				addSchedule(name, schedule);
				return;
			}
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.UPDATE_updateSchedule);
				statement.setBytes(1, schedule.wireEncode().getImmutableArray());
				statement.setString(2, name);
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.updateSchedule: SQLite error: "
								+ exception);
			}
		}
	
		////////////////////////////////////////////////////// Member management.
	
		/// <summary>
		/// Check if there is a member with the given identity name.
		/// </summary>
		///
		/// <param name="identity">The member's identity name.</param>
		/// <returns>True if there is a member.</returns>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override bool hasMember(Name identity) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_hasMember);
				statement.setBytes(1, identity.wireEncode(net.named_data.jndn.encoding.TlvWireFormat.get())
						.getImmutableArray());
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					if (result.NextResult())
						return true;
					else
						return false;
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.hasMember: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// List all the members.
		/// </summary>
		///
		/// <returns>A new List of Name with the names of all members. (Use List without
		/// generics so it works with older Java compilers.)</returns>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override IList listAllMembers() {
			IList list = new ArrayList();
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_listAllMembers);
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					while (result.NextResult()) {
						Name identity = new Name();
						try {
							identity.wireDecode(
									new Blob(result.getBytes(1), false),
									net.named_data.jndn.encoding.TlvWireFormat.get());
						} catch (EncodingException ex) {
							// We don't expect this to happen.
							throw new GroupManagerDb.Error(
									"Sqlite3GroupManagerDb.listAllMembers: Error decoding name: "
											+ ex);
						}
	
						ILOG.J2CsMapping.Collections.Collections.Add(list,identity);
					}
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.listAllMembers: SQLite error: "
								+ exception);
			}
	
			return list;
		}
	
		/// <summary>
		/// Get the name of the schedule for the given member's identity name.
		/// </summary>
		///
		/// <param name="identity">The member's identity name.</param>
		/// <returns>The name of the schedule.</returns>
		/// <exception cref="GroupManagerDb.Error">if there's no member with the given identityname in the database, or other database error.</exception>
		public override String getMemberSchedule(Name identity) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_getMemberSchedule);
				statement.setBytes(1, identity.wireEncode(net.named_data.jndn.encoding.TlvWireFormat.get())
						.getImmutableArray());
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					if (result.NextResult())
						return result.getString(1);
					else
						throw new GroupManagerDb.Error(
								"Sqlite3GroupManagerDb.getMemberSchedule: Cannot get the result from the database");
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.getMemberSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Add a new member with the given key named keyName into a schedule named
		/// scheduleName. The member's identity name is keyName.getPrefix(-1).
		/// </summary>
		///
		/// <param name="scheduleName">The schedule name.</param>
		/// <param name="keyName">The name of the key.</param>
		/// <param name="key">A Blob of the public key DER.</param>
		/// <exception cref="GroupManagerDb.Error">If there's no schedule named scheduleName, ifthe member's identity name already exists, or other database error.</exception>
		public override void addMember(String scheduleName, Name keyName, Blob key) {
			int scheduleId = getScheduleId(scheduleName);
			if (scheduleId == -1)
				throw new GroupManagerDb.Error("The schedule does not exist");
	
			// Needs to be changed in the future.
			Name memberName = keyName.getPrefix(-1);
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.INSERT_addMember);
				statement.setInt(1, scheduleId);
				statement.setBytes(2, memberName.wireEncode(net.named_data.jndn.encoding.TlvWireFormat.get())
						.getImmutableArray());
				statement.setBytes(3, keyName.wireEncode(net.named_data.jndn.encoding.TlvWireFormat.get())
						.getImmutableArray());
				statement.setBytes(4, key.getImmutableArray());
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.addMember: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Change the name of the schedule for the given member's identity name.
		/// </summary>
		///
		/// <param name="identity">The member's identity name.</param>
		/// <param name="scheduleName">The new schedule name.</param>
		/// <exception cref="GroupManagerDb.Error">if there's no member with the given identityname in the database, or there's no schedule named scheduleName, or otherdatabase error.</exception>
		public override void updateMemberSchedule(Name identity, String scheduleName) {
			int scheduleId = getScheduleId(scheduleName);
			if (scheduleId == -1)
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.updateMemberSchedule: The schedule does not exist");
	
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.UPDATE_updateMemberSchedule);
				statement.setInt(1, scheduleId);
				statement.setBytes(2, identity.wireEncode(net.named_data.jndn.encoding.TlvWireFormat.get())
						.getImmutableArray());
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.updateMemberSchedule: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Delete a member with the given identity name. If there is no member with
		/// the identity name, then do nothing.
		/// </summary>
		///
		/// <param name="identity">The member's identity name.</param>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		public override void deleteMember(Name identity) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.DELETE_deleteMember);
				statement.setBytes(1, identity.wireEncode(net.named_data.jndn.encoding.TlvWireFormat.get())
						.getImmutableArray());
	
				try {
					statement.executeUpdate();
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.deleteMember: SQLite error: "
								+ exception);
			}
		}
	
		/// <summary>
		/// Get the ID for the schedule.
		/// </summary>
		///
		/// <param name="name">The schedule name.</param>
		/// <returns>The ID, or -1 if the schedule name is not found.</returns>
		/// <exception cref="GroupManagerDb.Error">for a database error.</exception>
		private int getScheduleId(String name) {
			try {
				PreparedStatement statement = database_
						.prepareStatement(net.named_data.jndn.encrypt.Sqlite3GroupManagerDbBase.SELECT_getScheduleId);
				statement.setString(1, name);
	
				try {
					SqlDataReader result = statement.executeQuery();
	
					if (result.NextResult())
						return result.getInt(1);
					else
						return -1;
				} finally {
					statement.close();
				}
			} catch (SQLException exception) {
				throw new GroupManagerDb.Error(
						"Sqlite3GroupManagerDb.getScheduleId: SQLite error: "
								+ exception);
			}
		}
	
		internal SqlConnection database_;
	}
}
