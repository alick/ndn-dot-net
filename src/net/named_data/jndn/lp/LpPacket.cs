// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2016 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.lp {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// An LpPacket represents an NDNLPv2 packet including header fields an an
	/// optional fragment. This is an internal class which the application normally
	/// would not use.
	/// http://redmine.named-data.net/projects/nfd/wiki/NDNLPv2
	/// </summary>
	///
	public class LpPacket {
		public LpPacket() {
			this.headerFields_ = new ArrayList();
			this.fragmentWireEncoding_ = new Blob();
		}
	
		/// <summary>
		/// Get the fragment wire encoding.
		/// </summary>
		///
		/// <returns>The wire encoding, or an isNull Blob if not specified.</returns>
		public Blob getFragmentWireEncoding() {
			return fragmentWireEncoding_;
		}
	
		/// <summary>
		/// Get the number of header fields. This does not include the fragment.
		/// </summary>
		///
		/// <returns>The number of header fields.</returns>
		public int countHeaderFields() {
			return headerFields_.Count;
		}
	
		/// <summary>
		/// Get the header field at the given index.
		/// </summary>
		///
		/// <param name="index"></param>
		/// <returns>The header field at the index.</returns>
		public Object getHeaderField(int index) {
			return headerFields_[index];
		}
	
		/// <summary>
		/// Remove all header fields and set the fragment to an isNull Blob.
		/// </summary>
		///
		public void clear() {
			headerFields_ = new ArrayList();
			fragmentWireEncoding_ = new Blob();
		}
	
		/// <summary>
		/// Set the fragment wire encoding.
		/// </summary>
		///
		/// <param name="fragmentWireEncoding"></param>
		public void setFragmentWireEncoding(Blob fragmentWireEncoding) {
			fragmentWireEncoding_ = ((fragmentWireEncoding == null) ? new Blob()
					: fragmentWireEncoding);
		}
	
		/// <summary>
		/// Add a header field. To add the fragment, use setFragmentWireEncoding().
		/// </summary>
		///
		/// <param name="headerField">The header field to add.</param>
		public void addHeaderField(Object headerField) {
			ILOG.J2CsMapping.Collections.Collections.Add(headerFields_,headerField);
		}
	
		private ArrayList headerFields_;
		private Blob fragmentWireEncoding_;
	}
}
