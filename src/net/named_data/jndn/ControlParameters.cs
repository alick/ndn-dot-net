// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2014-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// A ControlParameters holds a Name and other fields for a ControlParameters
	/// which is used, for example, in the command interest to register a prefix with
	/// a forwarder.
	/// Note: getters will never be null so check for empty Names with something like
	/// `controlParameters.getStrategy().size() != 0`
	/// </summary>
	///
	public class ControlParameters {
		/// <summary>
		/// Create a new ControlParameters where all values are unspecified.
		/// </summary>
		///
		public ControlParameters() {
			this.name_ = null;
			this.faceId_ = -1;
			this.uri_ = "";
			this.localControlFeature_ = -1;
			this.origin_ = -1;
			this.cost_ = -1;
			this.flags_ = new ForwardingFlags();
			this.strategy_ = new Name();
			this.expirationPeriod_ = -1.0d;
		}
	
		/// <summary>
		/// Create a new ControlParameters as a deep copy of the given controlParameters.
		/// </summary>
		///
		/// <param name="controlParameters">The ControlParameters to copy.</param>
		public ControlParameters(ControlParameters controlParameters) {
			this.name_ = null;
			this.faceId_ = -1;
			this.uri_ = "";
			this.localControlFeature_ = -1;
			this.origin_ = -1;
			this.cost_ = -1;
			this.flags_ = new ForwardingFlags();
			this.strategy_ = new Name();
			this.expirationPeriod_ = -1.0d;
			name_ = (controlParameters.name_ == null) ? null : new Name(
					controlParameters.name_);
			faceId_ = controlParameters.faceId_;
			uri_ = controlParameters.uri_;
			localControlFeature_ = controlParameters.localControlFeature_;
			origin_ = controlParameters.origin_;
			cost_ = controlParameters.cost_;
			flags_ = new ForwardingFlags(controlParameters.flags_);
			strategy_ = new Name(controlParameters.strategy_);
			expirationPeriod_ = controlParameters.expirationPeriod_;
		}
	
		/// <summary>
		/// Encode this ControlParameters for a particular wire format.
		/// </summary>
		///
		/// <param name="wireFormat">A WireFormat object used to encode this ControlParameters.</param>
		/// <returns>The encoded buffer.</returns>
		public Blob wireEncode(WireFormat wireFormat) {
			return wireFormat.encodeControlParameters(this);
		}
	
		/// <summary>
		/// Encode this ControlParameters for the default wire format
		/// WireFormat.getDefaultWireFormat().
		/// </summary>
		///
		/// <returns>The encoded buffer.</returns>
		public Blob wireEncode() {
			return wireEncode(net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Decode the input using a particular wire format and update this ControlParameters.
		/// </summary>
		///
		/// <param name="input"></param>
		/// <param name="wireFormat">A WireFormat object used to decode the input.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(ByteBuffer input, WireFormat wireFormat) {
			wireFormat.decodeControlParameters(this, input, true);
		}
	
		/// <summary>
		/// Decode the input using the default wire format
		/// WireFormat.getDefaultWireFormat() and update this ControlParameters.
		/// </summary>
		///
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(ByteBuffer input) {
			wireDecode(input, net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Decode the input using a particular wire format and update this ControlParameters.
		/// </summary>
		///
		/// <param name="input">The input blob to decode.</param>
		/// <param name="wireFormat">A WireFormat object used to decode the input.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(Blob input, WireFormat wireFormat) {
			wireFormat.decodeControlParameters(this, input.buf(), false);
		}
	
		/// <summary>
		/// Decode the input using the default wire format
		/// WireFormat.getDefaultWireFormat() and update this ControlParameters.
		/// </summary>
		///
		/// <param name="input">The input blob to decode.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(Blob input) {
			wireDecode(input.buf());
		}
	
		/// <summary>
		/// Get the name.
		/// </summary>
		///
		/// <returns>The Name. If not specified, return null.</returns>
		public Name getName() {
			return name_;
		}
	
		public int getFaceId() {
			return faceId_;
		}
	
		public String getUri() {
			return uri_;
		}
	
		public int getLocalControlFeature() {
			return localControlFeature_;
		}
	
		public int getOrigin() {
			return origin_;
		}
	
		public int getCost() {
			return cost_;
		}
	
		public ForwardingFlags getForwardingFlags() {
			return flags_;
		}
	
		public Name getStrategy() {
			return strategy_;
		}
	
		public double getExpirationPeriod() {
			return expirationPeriod_;
		}
	
		/// <summary>
		/// Set the name.
		/// </summary>
		///
		/// <param name="name"></param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setName(Name name) {
			name_ = (name == null) ? null : new Name(name);
			return this;
		}
	
		/// <summary>
		/// Set the Face ID.
		/// </summary>
		///
		/// <param name="faceId">The new face ID, or -1 for not specified.</param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setFaceId(int faceId) {
			faceId_ = faceId;
			return this;
		}
	
		/// <summary>
		/// Set the URI.
		/// </summary>
		///
		/// <param name="uri">The new uri, or an empty string for not specified.</param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setUri(String uri) {
			uri_ = (uri == null) ? "" : uri;
			return this;
		}
	
		/// <summary>
		/// Set the local control feature value.
		/// </summary>
		///
		/// <param name="localControlFeature"></param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setLocalControlFeature(
				int localControlFeature) {
			localControlFeature_ = localControlFeature;
			return this;
		}
	
		/// <summary>
		/// Set the origin value.
		/// </summary>
		///
		/// <param name="origin">The new origin value, or -1 for not specified.</param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setOrigin(int origin) {
			origin_ = origin;
			return this;
		}
	
		/// <summary>
		/// Set the cost value.
		/// </summary>
		///
		/// <param name="cost">The new cost value, or -1 for not specified.</param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setCost(int cost) {
			cost_ = cost;
			return this;
		}
	
		/// <summary>
		/// Set the ForwardingFlags object to a copy of forwardingFlags. You can use
		/// getForwardingFlags() and change the existing ForwardingFlags object.
		/// </summary>
		///
		/// <param name="forwardingFlags">The new cost value, or null for not specified.</param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setForwardingFlags(
				ForwardingFlags forwardingFlags) {
			flags_ = (forwardingFlags == null) ? new ForwardingFlags()
					: new ForwardingFlags(forwardingFlags);
			return this;
		}
	
		/// <summary>
		/// Set the strategy to a copy of the given Name.
		/// </summary>
		///
		/// <param name="strategy">The Name to copy, or an empty Name if not specified.</param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setStrategy(Name strategy) {
			strategy_ = (strategy == null) ? new Name() : new Name(strategy);
			return this;
		}
	
		/// <summary>
		/// Set the expiration period.
		/// </summary>
		///
		/// <param name="expirationPeriod"></param>
		/// <returns>This ControlParameters so that you can chain calls to update values.</returns>
		public ControlParameters setExpirationPeriod(double expirationPeriod) {
			expirationPeriod_ = expirationPeriod;
			return this;
		}
	
		/// <summary>
		/// Clear fields and reset to default values.
		/// </summary>
		///
		public void clear() {
			name_ = null;
			faceId_ = -1;
			uri_ = "";
			localControlFeature_ = -1;
			origin_ = -1;
			cost_ = -1;
			flags_ = new ForwardingFlags();
			strategy_ = new Name();
			expirationPeriod_ = -1.0d;
		}
	
		public override bool Equals(Object other) {
			return false;
		}
	
		private Name name_;
		private int faceId_;
		/// <summary>
		/// < -1 for none. 
		/// </summary>
		///
		private String uri_;
		private int localControlFeature_;
		/// <summary>
		/// < -1 for none. 
		/// </summary>
		///
		private int origin_;
		/// <summary>
		/// < -1 for none. 
		/// </summary>
		///
		private int cost_;
		/// <summary>
		/// < -1 for none. 
		/// </summary>
		///
		private ForwardingFlags flags_;
		private Name strategy_;
		private double expirationPeriod_;
		/**< Milliseconds. -1 for none. */
	}
}
