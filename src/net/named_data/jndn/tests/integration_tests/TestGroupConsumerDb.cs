// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.integration_tests {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.spec;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding.der;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.security;
	using net.named_data.jndn.util;
	
	// Note: We name this differently than TestConsumerDb so that it is not the
	// first integration test to run, which doesn't work for some reason. (Maybe the
	// static class initializers don't run?)
	public class TestGroupConsumerDb {
		public void setUp() {
			FileInfo policyConfigDirectory = net.named_data.jndn.tests.integration_tests.IntegrationTestsCommon
					.getPolicyConfigDirectory();
	
			databaseFilePath = new FileInfo(System.IO.Path.Combine(policyConfigDirectory.FullName,"test.db"));
			databaseFilePath.delete();
		}
	
		public void tearDown() {
			databaseFilePath.delete();
		}
	
		static internal void generateRsaKeys(Blob[] encryptionKeyBlob,
				Blob[] decryptionKeyBlob) {
			RsaKeyParams paras = new RsaKeyParams();
			DecryptKey decryptKey = net.named_data.jndn.encrypt.algo.RsaAlgorithm.generateKey(paras);
			decryptionKeyBlob[0] = decryptKey.getKeyBits();
			EncryptKey encryptKey = net.named_data.jndn.encrypt.algo.RsaAlgorithm
					.deriveEncryptKey(decryptionKeyBlob[0]);
			encryptionKeyBlob[0] = encryptKey.getKeyBits();
		}
	
		static internal void generateAesKeys(Blob[] encryptionKeyBlob,
				Blob[] decryptionKeyBlob) {
			AesKeyParams paras = new AesKeyParams();
			DecryptKey memberDecryptKey = net.named_data.jndn.encrypt.algo.AesAlgorithm.generateKey(paras);
			decryptionKeyBlob[0] = memberDecryptKey.getKeyBits();
			EncryptKey memberEncryptKey = net.named_data.jndn.encrypt.algo.AesAlgorithm
					.deriveEncryptKey(decryptionKeyBlob[0]);
			encryptionKeyBlob[0] = memberEncryptKey.getKeyBits();
		}
	
		public void testOperateAesDecryptionKey() {
			// Test construction.
			ConsumerDb database = new Sqlite3ConsumerDb(System.IO.Path.GetFullPath(databaseFilePath.Name));
	
			// Generate key blobs.
			Blob[] encryptionKeyBlob = { null };
			Blob[] decryptionKeyBlob = { null };
			generateAesKeys(encryptionKeyBlob, decryptionKeyBlob);
	
			Name keyName = new Name(
					"/alice/health/samples/activity/steps/C-KEY/20150928080000/20150928090000!");
			keyName.append(new Name("FOR/alice/health/read/activity!"));
			database.addKey(keyName, decryptionKeyBlob[0]);
			Blob resultBlob = database.getKey(keyName);
	
			Assert.AssertTrue(decryptionKeyBlob[0].equals(resultBlob));
	
			database.deleteKey(keyName);
			resultBlob = database.getKey(keyName);
	
			Assert.AssertEquals(0, resultBlob.size());
		}
	
		public void testOperateRsaDecryptionKey() {
			// Test construction.
			ConsumerDb database = new Sqlite3ConsumerDb(System.IO.Path.GetFullPath(databaseFilePath.Name));
	
			// Generate key blobs.
			Blob[] encryptionKeyBlob = { null };
			Blob[] decryptionKeyBlob = { null };
			generateRsaKeys(encryptionKeyBlob, decryptionKeyBlob);
	
			Name keyName = new Name(
					"/alice/health/samples/activity/steps/D-KEY/20150928080000/20150928090000!");
			keyName.append(new Name("FOR/test/member/KEY/123!"));
			database.addKey(keyName, decryptionKeyBlob[0]);
			Blob resultBlob = database.getKey(keyName);
	
			Assert.AssertTrue(decryptionKeyBlob[0].equals(resultBlob));
	
			database.deleteKey(keyName);
			resultBlob = database.getKey(keyName);
	
			Assert.AssertEquals(0, resultBlob.size());
		}
	
		private FileInfo databaseFilePath;
	}
}
