// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2014-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.tests.unit_tests {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.util;
	
	public class TestNameComponentMethods {
		public void testUnicode() {
			Name.Component comp1 = new Name.Component("entr\u00E9e");
			String expected = "entr%C3%A9e";
			Assert.AssertEquals("Unicode URI not decoded correctly", expected,
					comp1.toEscapedString());
		}
	
		public void testHashCode() {
			Name.Component foo1 = new Name.Component("foo");
			Name.Component foo2 = new Name.Component("foo");
	
			Assert.AssertEquals("Hash codes for same strings are not equal",
					foo1.GetHashCode(), foo2.GetHashCode());
	
			Name.Component bar = new Name.Component("bar");
			// Strictly speaking, it is possible for a hash collision, but unlikely.
			Assert.AssertTrue("Hash codes for different strings are not different",
					foo1.GetHashCode() != bar.GetHashCode());
		}
	
		public void testCompare() {
			Name.Component c7f = new Name("/%7F").get(0);
			Name.Component c80 = new Name("/%80").get(0);
			Name.Component c81 = new Name("/%81").get(0);
	
			Assert.AssertTrue("%81 should be greater than %80", c81.compare(c80) > 0);
			Assert.AssertTrue("%80 should be greater than %7f", c80.compare(c7f) > 0);
		}
	
		// Many more component methods to be tested!
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
