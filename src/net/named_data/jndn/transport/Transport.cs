// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2013-2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.transport {
	
	using ILOG.J2CsMapping.NIO;
	using ILOG.J2CsMapping.Util;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// A Transport object is used by Face to send packets and to listen for incoming
	/// packets. See connect() and processEvents() for more details.
	/// </summary>
	///
	public abstract class Transport {
		/// <summary>
		/// A Transport.ConnectionInfo is a base class for connection information used
		/// by subclasses of Transport.
		/// </summary>
		///
		public class ConnectionInfo {
		}
	
		/// <summary>
		/// Determine whether this transport connecting according to connectionInfo is
		/// to a node on the current machine. This affects the processing of
		/// Face.registerPrefix(): if the NFD is local, registration occurs with the
		/// '/localhost/nfd...' prefix; if non-local, the library will attempt to use
		/// remote prefix registration using '/localhop/nfd...'
		/// </summary>
		///
		/// <param name="connectionInfo">A ConnectionInfo with the host to check.</param>
		/// <returns>True if the host is local, false if not.</returns>
		/// <exception cref="System.IO.IOException"></exception>
		public abstract bool isLocal(Transport.ConnectionInfo connectionInfo);
	
		/// <summary>
		/// Check if this transport is async where connect needs to use the onConnected
		/// callback.
		/// </summary>
		///
		/// <returns>True if transport connect is async, false if not.</returns>
		public abstract bool isAsync();
	
		/// <summary>
		/// Connect according to the info in ConnectionInfo, and use elementListener.
		/// </summary>
		///
		/// <param name="connectionInfo">An object of a subclass of ConnectionInfo.</param>
		/// <param name="elementListener"></param>
		/// <param name="onConnected"></param>
		/// <exception cref="IOException">For I/O error.</exception>
		public virtual void connect(Transport.ConnectionInfo connectionInfo,
				ElementListener elementListener, IRunnable onConnected) {
			throw new NotSupportedException("connect is not implemented");
		}
	
		/// <summary>
		/// Send data to the host
		/// </summary>
		///
		/// <param name="data"></param>
		/// <exception cref="IOException">For I/O error.</exception>
		public virtual void send(ByteBuffer data) {
			throw new NotSupportedException("send is not implemented");
		}
	
		/// <summary>
		/// Process any data to receive.  For each element received, call
		/// elementListener.onReceivedElement.
		/// This is non-blocking and will silently time out after a brief period if
		/// there is no data to receive.
		/// You should repeatedly call this from an event loop.
		/// You should normally not call this directly since it is called by
		/// Face.processEvents.
		/// If you call this from an main event loop, you may want to catch and
		/// log/disregard all exceptions.
		/// </summary>
		///
		/// <exception cref="IOException">For I/O error.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public abstract void processEvents();
	
		/// <summary>
		/// Check if the transport is connected.
		/// </summary>
		///
		/// <returns>True if connected.</returns>
		public virtual bool getIsConnected() {
			throw new NotSupportedException(
					"getIsConnected is not implemented");
		}
	
		/// <summary>
		/// Close the connection.  This base class implementation does nothing, but
		/// your derived class can override.
		/// </summary>
		///
		/// <exception cref="IOException">For I/O error.</exception>
		public virtual void close() {
		}
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
