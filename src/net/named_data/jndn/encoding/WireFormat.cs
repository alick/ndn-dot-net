// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2013-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.encoding {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encrypt;
	using net.named_data.jndn.lp;
	using net.named_data.jndn.util;
	
	public class WireFormat {
		/// <summary>
		/// Encode name and return the encoding.  Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="name">The Name object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeName(Name name) {
			throw new NotSupportedException("encodeName is not implemented");
		}
	
		/// <summary>
		/// Decode input as a name and set the fields of the Name object.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="name">The Name object whose fields are updated.</param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual void decodeName(Name name, ByteBuffer input, bool copy) {
			throw new NotSupportedException("decodeName is not implemented");
		}
	
		/// <summary>
		/// Decode input as a name and set the fields of the Name object. Copy from the
		/// input when making new Blob values. Your derived class should override.
		/// </summary>
		///
		/// <param name="name">The Name object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeName(Name name, ByteBuffer input) {
			decodeName(name, input, true);
		}
	
		/// <summary>
		/// Encode interest and return the encoding.  Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="interest">The Interest object to encode.</param>
		/// <param name="signedPortionBeginOffset">name component and ends just before the final name component (which is assumed to be a signature for a signed interest). If you are not encoding in order to sign, you can call encodeInterest(Interest interest) to ignore this returned value.</param>
		/// <param name="signedPortionEndOffset">name component and ends just before the final name component (which is assumed to be a signature for a signed interest). If you are not encoding in order to sign, you can call encodeInterest(Interest interest) to ignore this returned value.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeInterest(Interest interest,
				int[] signedPortionBeginOffset, int[] signedPortionEndOffset) {
			throw new NotSupportedException(
					"encodeInterest is not implemented");
		}
	
		/// <summary>
		/// Encode interest and return the encoding.  Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="interest">The Interest object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public Blob encodeInterest(Interest interest) {
			return encodeInterest(interest, new int[1], new int[1]);
		}
	
		/// <summary>
		/// Decode input as an interest and set the fields of the interest object.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="interest">The Interest object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="signedPortionBeginOffset">name component and ends just before the final name component (which is assumed to be a signature for a signed interest). If you are not decoding in order to verify, you can call decodeInterest(Interest interest, ByteBuffer input) to ignore this returned value.</param>
		/// <param name="signedPortionEndOffset">name component and ends just before the final name component (which is assumed to be a signature for a signed interest). If you are not decoding in order to verify, you can call decodeInterest(Interest interest, ByteBuffer input) to ignore this returned value.</param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual void decodeInterest(Interest interest, ByteBuffer input,
				int[] signedPortionBeginOffset, int[] signedPortionEndOffset,
				bool copy) {
			throw new NotSupportedException(
					"decodeInterest is not implemented");
		}
	
		/// <summary>
		/// Decode input as an interest and set the fields of the interest object.
		/// Copy from the input when making new Blob values. Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="interest">The Interest object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="signedPortionBeginOffset">name component and ends just before the final name component (which is assumed to be a signature for a signed interest). If you are not decoding in order to verify, you can call decodeInterest(Interest interest, ByteBuffer input) to ignore this returned value.</param>
		/// <param name="signedPortionEndOffset">name component and ends just before the final name component (which is assumed to be a signature for a signed interest). If you are not decoding in order to verify, you can call decodeInterest(Interest interest, ByteBuffer input) to ignore this returned value.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeInterest(Interest interest, ByteBuffer input,
				int[] signedPortionBeginOffset, int[] signedPortionEndOffset) {
			decodeInterest(interest, input, signedPortionBeginOffset,
					signedPortionEndOffset, true);
		}
	
		/// <summary>
		/// Decode input as an interest and set the fields of the interest object.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="interest">The Interest object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeInterest(Interest interest, ByteBuffer input,
				bool copy) {
			decodeInterest(interest, input, new int[1], new int[1], copy);
		}
	
		/// <summary>
		/// Decode input as an interest and set the fields of the interest object.
		/// Copy from the input when making new Blob values. Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="interest">The Interest object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeInterest(Interest interest, ByteBuffer input) {
			decodeInterest(interest, input, new int[1], new int[1], true);
		}
	
		/// <summary>
		/// Encode data and return the encoding.  Your derived class should override.
		/// </summary>
		///
		/// <param name="data">The Data object to encode.</param>
		/// <param name="signedPortionBeginOffset">If you are not encoding in order to sign, you can call encodeData(data) to ignore this returned value.</param>
		/// <param name="signedPortionEndOffset">If you are not encoding in order to sign, you can call encodeData(data) to ignore this returned value.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeData(Data data, int[] signedPortionBeginOffset,
				int[] signedPortionEndOffset) {
			throw new NotSupportedException("encodeData is not implemented");
		}
	
		/// <summary>
		/// Encode data and return the encoding.
		/// </summary>
		///
		/// <param name="data">The Data object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public Blob encodeData(Data data) {
			return encodeData(data, new int[1], new int[1]);
		}
	
		/// <summary>
		/// Decode input as a data packet and set the fields in the data object.  Your
		/// derived class should override.
		/// </summary>
		///
		/// <param name="data">The Data object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="signedPortionBeginOffset">If you are not decoding in order to verify, you can call decodeData(data, input) to ignore this returned value.</param>
		/// <param name="signedPortionEndOffset">setting signedPortionEndOffset[0]. If you are not decoding in order to verify, you can call decodeData(data, input) to ignore this returned value.</param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual void decodeData(Data data, ByteBuffer input,
				int[] signedPortionBeginOffset, int[] signedPortionEndOffset,
				bool copy) {
			throw new NotSupportedException("decodeData is not implemented");
		}
	
		/// <summary>
		/// Decode input as a data packet and set the fields in the data object. Copy
		/// from the input when making new Blob values. Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="data">The Data object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="signedPortionBeginOffset">If you are not decoding in order to verify, you can call decodeData(data, input) to ignore this returned value.</param>
		/// <param name="signedPortionEndOffset">setting signedPortionEndOffset[0]. If you are not decoding in order to verify, you can call decodeData(data, input) to ignore this returned value.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeData(Data data, ByteBuffer input,
				int[] signedPortionBeginOffset, int[] signedPortionEndOffset) {
			decodeData(data, input, signedPortionBeginOffset,
					signedPortionEndOffset, true);
		}
	
		/// <summary>
		/// Decode input as a data packet and set the fields in the data object.  Your
		/// derived class should override.
		/// </summary>
		///
		/// <param name="data">The Data object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeData(Data data, ByteBuffer input, bool copy) {
			decodeData(data, input, new int[1], new int[1], copy);
		}
	
		/// <summary>
		/// Decode input as a data packet and set the fields in the data object. Copy
		/// from the input when making new Blob values.  Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="data">The Data object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeData(Data data, ByteBuffer input) {
			decodeData(data, input, new int[1], new int[1], true);
		}
	
		/// <summary>
		/// Encode controlParameters and return the encoding.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="controlParameters">The ControlParameters object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeControlParameters(ControlParameters controlParameters) {
			throw new NotSupportedException(
					"encodeControlParameters is not implemented");
		}
	
		/// <summary>
		/// Decode input as a control parameters and set the fields of the
		/// controlParameters object.  Your derived class should override.
		/// </summary>
		///
		/// <param name="controlParameters"></param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual void decodeControlParameters(ControlParameters controlParameters,
				ByteBuffer input, bool copy) {
			throw new NotSupportedException(
					"decodeControlParameters is not implemented");
		}
	
		/// <summary>
		/// Decode input as a control parameters and set the fields of the
		/// controlParameters object. Copy from the input when making new Blob values.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="controlParameters"></param>
		/// <param name="input"></param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeControlParameters(
				ControlParameters controlParameters, ByteBuffer input) {
			decodeControlParameters(controlParameters, input, true);
		}
	
		/// <summary>
		/// Encode controlResponse and return the encoding.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="controlResponse">The ControlResponse object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeControlResponse(ControlResponse controlResponse) {
			throw new NotSupportedException(
					"encodeControlResponse is not implemented");
		}
	
		/// <summary>
		/// Decode input as a control parameters and set the fields of the
		/// controlResponse object.  Your derived class should override.
		/// </summary>
		///
		/// <param name="controlResponse"></param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual void decodeControlResponse(ControlResponse controlResponse,
				ByteBuffer input, bool copy) {
			throw new NotSupportedException(
					"decodeControlResponse is not implemented");
		}
	
		/// <summary>
		/// Decode input as a control parameters and set the fields of the
		/// controlResponse object. Copy from the input when making new Blob values.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="controlResponse"></param>
		/// <param name="input"></param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeControlResponse(ControlResponse controlResponse,
				ByteBuffer input) {
			decodeControlResponse(controlResponse, input, true);
		}
	
		/// <summary>
		/// Encode signature as a SignatureInfo and return the encoding.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="signature">An object of a subclass of Signature to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeSignatureInfo(Signature signature) {
			throw new NotSupportedException(
					"encodeSignatureInfo is not implemented");
		}
	
		/// <summary>
		/// Decode signatureInfo as a signature info and signatureValue as the related
		/// SignatureValue, and return a new object which is a subclass of Signature.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="signatureInfo"></param>
		/// <param name="signatureValue"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <returns>A new object which is a subclass of Signature.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual Signature decodeSignatureInfoAndValue(ByteBuffer signatureInfo,
				ByteBuffer signatureValue, bool copy) {
			throw new NotSupportedException(
					"decodeSignatureInfoAndValue is not implemented");
		}
	
		/// <summary>
		/// Decode signatureInfo as a signature info and signatureValue as the related
		/// SignatureValue, and return a new object which is a subclass of Signature.
		/// Copy from the input when making new Blob values. Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="signatureInfo"></param>
		/// <param name="signatureValue"></param>
		/// <returns>A new object which is a subclass of Signature.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public Signature decodeSignatureInfoAndValue(
				ByteBuffer signatureInfo, ByteBuffer signatureValue) {
			return decodeSignatureInfoAndValue(signatureInfo, signatureValue, true);
		}
	
		/// <summary>
		/// Encode the signatureValue in the Signature object as a SignatureValue (the
		/// signature bits) and return the encoding.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="signature"></param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeSignatureValue(Signature signature) {
			throw new NotSupportedException(
					"encodeSignatureValue is not implemented");
		}
	
		/// <summary>
		/// Decode input as an LpPacket and set the fields of the lpPacket object. Your
		/// derived class should override.
		/// </summary>
		///
		/// <param name="lpPacket">The LpPacket object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual void decodeLpPacket(LpPacket lpPacket, ByteBuffer input, bool copy) {
			throw new NotSupportedException(
					"decodeLpPacket is not implemented");
		}
	
		/// <summary>
		/// Decode input as an LpPacket and set the fields of the lpPacket object. Copy
		/// from the input when making new Blob values. Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="lpPacket">The LpPacket object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public void decodeLpPacket(LpPacket lpPacket, ByteBuffer input) {
			decodeLpPacket(lpPacket, input, true);
		}
	
		/// <summary>
		/// Encode delegationSet and return the encoding.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="delegationSet">The DelegationSet object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeDelegationSet(DelegationSet delegationSet) {
			throw new NotSupportedException(
					"encodeDelegationSet is not implemented");
		}
	
		/// <summary>
		/// Decode input as a delegation set and set the fields of the
		/// delegationSet object.  Your derived class should override.
		/// </summary>
		///
		/// <param name="delegationSet">The DelegationSet object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public virtual void decodeDelegationSet(DelegationSet delegationSet,
				ByteBuffer input, bool copy) {
			throw new NotSupportedException(
					"decodeDelegationSet is not implemented");
		}
	
		/// <summary>
		/// Decode input as a delegation set and set the fields of the
		/// delegationSet object. Copy from the input when making new Blob values. Your
		/// derived class should override.
		/// </summary>
		///
		/// <param name="delegationSet">The DelegationSet object whose fields are updated.</param>
		/// <param name="input"></param>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void decodeDelegationSet(DelegationSet delegationSet,
				ByteBuffer input) {
			decodeDelegationSet(delegationSet, input, true);
		}
	
		/// <summary>
		/// Encode the EncryptedContent v1 and return the encoding. Your derived class
		/// should override.
		/// </summary>
		///
		/// <param name="encryptedContent">The EncryptedContent object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeEncryptedContent(EncryptedContent encryptedContent) {
			throw new NotSupportedException(
					"encodeEncryptedContent is not implemented");
		}
	
		/// <summary>
		/// Decode input as an EncryptedContent v1 and set the fields of the
		/// encryptedContent object. Your derived class should override.
		/// </summary>
		///
		/// <param name="encryptedContent"></param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual void decodeEncryptedContent(EncryptedContent encryptedContent,
				ByteBuffer input, bool copy) {
			throw new NotSupportedException(
					"decodeEncryptedContent is not implemented");
		}
	
		/// <summary>
		/// Decode input as an EncryptedContent v1 and set the fields of the
		/// encryptedContent object. Copy from the input when making new Blob values.
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="encryptedContent"></param>
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public void decodeEncryptedContent(EncryptedContent encryptedContent,
				ByteBuffer input) {
			decodeEncryptedContent(encryptedContent, input, true);
		}
	
		/// <summary>
		/// Encode the EncryptedContent v2 (used in Name-based Access Control v2) and
		/// return the encoding.
		/// See https://github.com/named-data/name-based-access-control/blob/new/docs/spec.rst .
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="encryptedContent">The EncryptedContent object to encode.</param>
		/// <returns>A Blob containing the encoding.</returns>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual Blob encodeEncryptedContentV2(EncryptedContent encryptedContent) {
			throw new NotSupportedException(
					"encodeEncryptedContentV2 is not implemented");
		}
	
		/// <summary>
		/// Decode input as an EncryptedContent v2 (used in Name-based Access Control
		/// v2) and set the fields of the encryptedContent object.
		/// See https://github.com/named-data/name-based-access-control/blob/new/docs/spec.rst .
		/// Your derived class should override.
		/// </summary>
		///
		/// <param name="encryptedContent"></param>
		/// <param name="input"></param>
		/// <param name="copy">unchanged while the Blob values are used.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public virtual void decodeEncryptedContentV2(EncryptedContent encryptedContent,
				ByteBuffer input, bool copy) {
			throw new NotSupportedException(
					"decodeEncryptedContentV2 is not implemented");
		}
	
		/// <summary>
		/// Decode input as an EncryptedContent v2 (used in Name-based Access Control
		/// v2) and set the fields of the encryptedContent object.
		/// See https://github.com/named-data/name-based-access-control/blob/new/docs/spec.rst .
		/// Copy from the input when making new Blob values. Your derived class should
		/// override.
		/// </summary>
		///
		/// <param name="encryptedContent"></param>
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		/// <exception cref="System.NotSupportedException">for unimplemented if the derivedclass does not override.</exception>
		public void decodeEncryptedContentV2(
				EncryptedContent encryptedContent, ByteBuffer input) {
			decodeEncryptedContentV2(encryptedContent, input, true);
		}
	
		/// <summary>
		/// Set the static default WireFormat used by default encoding and decoding
		/// methods.
		/// </summary>
		///
		/// <param name="wireFormat"></param>
		public static void setDefaultWireFormat(WireFormat wireFormat) {
			defaultWireFormat_ = wireFormat;
		}
	
		/// <summary>
		/// Return the default WireFormat used by default encoding and decoding methods
		/// which was set with setDefaultWireFormat.
		/// </summary>
		///
		/// <returns>The WireFormat object.</returns>
		public static WireFormat getDefaultWireFormat() {
			WireFormat result = defaultWireFormat_;
			if (result == null) {
				 lock (typeof(WireFormat)) {
								if ((result = defaultWireFormat_) == null)
									result = defaultWireFormat_ = net.named_data.jndn.encoding.TlvWireFormat.get();
							}
			}
	
			return result;
		}
	
		private static volatile WireFormat defaultWireFormat_;
	}
}
