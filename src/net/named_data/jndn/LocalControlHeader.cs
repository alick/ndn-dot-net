// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2015-2016 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// A LocalControlHeader represents an NFD LocalControlHeader which holds fields
	/// like face ID. A LocalControlHeader object is optional in an Interest or Data
	/// object.
	/// </summary>
	///
	public class LocalControlHeader {
		/// <summary>
		/// Create a LocalControlHeader where all fields are not specified.
		/// </summary>
		///
		public LocalControlHeader() {
			this.incomingFaceId_ = -1;
			this.nextHopFaceId_ = -1;
			this.payloadWireEncoding_ = new Blob();
		}
	
		/// <summary>
		/// Create a LocalControlHeader with a copy of the fields in localControlHeader.
		/// </summary>
		///
		/// <param name="localControlHeader">The LocalControlHeader to copy.</param>
		public LocalControlHeader(LocalControlHeader localControlHeader) {
			this.incomingFaceId_ = -1;
			this.nextHopFaceId_ = -1;
			this.payloadWireEncoding_ = new Blob();
			incomingFaceId_ = localControlHeader.incomingFaceId_;
			nextHopFaceId_ = localControlHeader.nextHopFaceId_;
			payloadWireEncoding_ = localControlHeader.payloadWireEncoding_;
		}
	
		/// <summary>
		/// Get the incoming face ID.
		/// </summary>
		///
		/// <returns>The incoming face ID. If not specified, return -1.</returns>
		public long getIncomingFaceId() {
			return incomingFaceId_;
		}
	
		/// <summary>
		/// Get the next hop face ID.
		/// </summary>
		///
		/// <returns>The next hop face ID. If not specified, return -1.</returns>
		public long getNextHopFaceId() {
			return nextHopFaceId_;
		}
	
		public Blob getPayloadWireEncoding() {
			return payloadWireEncoding_;
		}
	
		/// <summary>
		/// Set the incoming face ID.
		/// </summary>
		///
		/// <param name="incomingFaceId">The incoming face ID. If not specified, set to -1.</param>
		public void setIncomingFaceId(long incomingFaceId) {
			incomingFaceId_ = incomingFaceId;
		}
	
		/// <summary>
		/// Set the next hop face ID.
		/// </summary>
		///
		/// <param name="nextHopFaceId">The next hop face ID. If not specified, set to -1.</param>
		public void setNextHopFaceId(long nextHopFaceId) {
			nextHopFaceId_ = nextHopFaceId;
		}
	
		public void setPayloadWireEncoding(Blob payloadWireEncoding) {
			payloadWireEncoding_ = ((payloadWireEncoding == null) ? new Blob()
					: payloadWireEncoding);
		}
	
		/// <summary>
		/// Encode this LocalControlHeader for a particular wire format.
		/// </summary>
		///
		/// <param name="wireFormat">A WireFormat object used to encode this LocalControlHeader.</param>
		/// <returns>The encoded buffer.</returns>
		public Blob wireEncode(WireFormat wireFormat) {
			return wireFormat.encodeLocalControlHeader(this);
		}
	
		/// <summary>
		/// Encode this LocalControlHeader for the default wire format
		/// WireFormat.getDefaultWireFormat().
		/// </summary>
		///
		/// <returns>The encoded buffer.</returns>
		public Blob wireEncode() {
			return wireEncode(net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Decode the input using a particular wire format and update this LocalControlHeader.
		/// </summary>
		///
		/// <param name="input"></param>
		/// <param name="wireFormat">A WireFormat object used to decode the input.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(ByteBuffer input, WireFormat wireFormat) {
			wireFormat.decodeLocalControlHeader(this, input);
		}
	
		/// <summary>
		/// Decode the input using the default wire format
		/// WireFormat.getDefaultWireFormat() and update this LocalControlHeader.
		/// </summary>
		///
		/// <param name="input"></param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(ByteBuffer input) {
			wireDecode(input, net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Decode the input using a particular wire format and update this LocalControlHeader.
		/// </summary>
		///
		/// <param name="input">The input blob to decode.</param>
		/// <param name="wireFormat">A WireFormat object used to decode the input.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(Blob input, WireFormat wireFormat) {
			wireDecode(input.buf(), wireFormat);
		}
	
		/// <summary>
		/// Decode the input using the default wire format
		/// WireFormat.getDefaultWireFormat() and update this LocalControlHeader.
		/// </summary>
		///
		/// <param name="input">The input blob to decode.</param>
		/// <exception cref="EncodingException">For invalid encoding.</exception>
		public void wireDecode(Blob input) {
			wireDecode(input.buf());
		}
	
		private long incomingFaceId_;
		private long nextHopFaceId_;
		private Blob payloadWireEncoding_;
		// For now, ignore CachingPolicy since it for the LocalControlHeader in a Data
		// packet from the application to NFD, and for now we only support a
		// LocalControlHeader in the Interest packet from the application.
	}
}
