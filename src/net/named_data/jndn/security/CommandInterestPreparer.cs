// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2018-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.encoding;
	using net.named_data.jndn.encoding.tlv;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// A CommandInterestPreparer keeps track of a timestamp and prepares a command
	/// interest by adding a timestamp and nonce to the name of an Interest. This
	/// class is primarily designed to be used by the CommandInterestSigner, but can
	/// also be using in an application that defines custom signing methods not
	/// supported by the KeyChain (such as HMAC-SHA1). See the Command Interest
	/// documentation:
	/// https://redmine.named-data.net/projects/ndn-cxx/wiki/CommandInterest
	/// </summary>
	///
	public class CommandInterestPreparer {
		/// <summary>
		/// Create a CommandInterestPreparer and initialize the timestamp to now.
		/// </summary>
		///
		public CommandInterestPreparer() {
			this.lastUsedTimestampLock_ = new Object();
			this.nowOffsetMilliseconds_ = 0;
			lastUsedTimestamp_ = Math.Round(net.named_data.jndn.util.Common.getNowMilliseconds(),MidpointRounding.AwayFromZero);
		}
	
		/// <summary>
		/// Append a timestamp component and a random nonce component to interest's
		/// name. This ensures that the timestamp is greater than the timestamp used in
		/// the previous call.
		/// </summary>
		///
		/// <param name="interest">The interest whose name is append with components.</param>
		/// <param name="wireFormat">A WireFormat object used to encode the SignatureInfo.</param>
		public void prepareCommandInterestName(Interest interest,
				WireFormat wireFormat) {
			double timestamp;
			 lock (lastUsedTimestampLock_) {
						// nowOffsetMilliseconds_ is only used for testing.
						double now = net.named_data.jndn.util.Common.getNowMilliseconds() + nowOffsetMilliseconds_;
						timestamp = Math.Round(now,MidpointRounding.AwayFromZero);
						while (timestamp <= lastUsedTimestamp_)
							timestamp += 1.0d;
			
						// Update the timestamp now while it is locked. In the small chance that
						//   signing fails, it just means that we have bumped the timestamp.
						lastUsedTimestamp_ = timestamp;
					}
	
			// The timestamp is encoded as a TLV nonNegativeInteger.
			TlvEncoder encoder = new TlvEncoder(8);
			encoder.writeNonNegativeInteger((long) timestamp);
			interest.getName().append(new Blob(encoder.getOutput(), false));
	
			// The random value is a TLV nonNegativeInteger too, but we know it is 8
			//   bytes, so we don't need to call the nonNegativeInteger encoder.
			ByteBuffer randomBuffer = ILOG.J2CsMapping.NIO.ByteBuffer.allocate(8);
			// Note: SecureRandom is thread safe.
			net.named_data.jndn.util.Common.getRandom().nextBytes(randomBuffer.array());
			interest.getName().append(new Blob(randomBuffer, false));
		}
	
		/// <summary>
		/// Append a timestamp component and a random nonce component to interest's
		/// name. This ensures that the timestamp is greater than the timestamp used in
		/// the previous call. Use the default WireFormat to encode the SignatureInfo.
		/// </summary>
		///
		/// <param name="interest">The interest whose name is append with components.</param>
		public void prepareCommandInterestName(Interest interest) {
			prepareCommandInterestName(interest, net.named_data.jndn.encoding.WireFormat.getDefaultWireFormat());
		}
	
		/// <summary>
		/// Set the offset for when prepareCommandInterestName() gets the current time,
		/// which should only be used for testing.
		/// </summary>
		///
		/// <param name="nowOffsetMilliseconds">The offset in milliseconds.</param>
		public void setNowOffsetMilliseconds_(double nowOffsetMilliseconds) {
			nowOffsetMilliseconds_ = nowOffsetMilliseconds;
		}
	
		private double lastUsedTimestamp_;
		private readonly Object lastUsedTimestampLock_;
		private double nowOffsetMilliseconds_;
	}
}
