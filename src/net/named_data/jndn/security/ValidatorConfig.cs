// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// ValidatorConfig extends Validator to implements a validator which can be
	/// set up via a configuration file.
	/// </summary>
	///
	public class ValidatorConfig : Validator {
		// TODO: Add Options.
		// TODO: Add ValidationPolicyCommandInterest.
		public ValidatorConfig(CertificateFetcher fetcher) : base(new ValidationPolicyConfig(), fetcher) {
			// TODO: Use getInnerPolicy().
			policyConfig_ = (ValidationPolicyConfig) getPolicy();
		}
	
		// TODO: Add Options.
		// TODO: Add ValidationPolicyCommandInterest.
		/// <summary>
		/// Create a ValidatorConfig that uses a CertificateFetcherFromNetwork for the
		/// given Face.
		/// </summary>
		///
		/// <param name="face">The face for the certificate fetcher to call expressInterest.</param>
		public ValidatorConfig(Face face) : base(new ValidationPolicyConfig(), new CertificateFetcherFromNetwork(face)) {
			// TODO: Use getInnerPolicy().
			policyConfig_ = (ValidationPolicyConfig) getPolicy();
		}
	
		/// <summary>
		/// Load the configuration from the given config file. This replaces any
		/// existing configuration.
		/// </summary>
		///
		/// <param name="filePath">The The path of the config file.</param>
		public void load(String filePath) {
			policyConfig_.load(filePath);
		}
	
		/// <summary>
		/// Load the configuration from the given input string. This replaces any
		/// existing configuration.
		/// </summary>
		///
		/// <param name="input"></param>
		/// <param name="inputName">Used for log messages, etc.</param>
		public void load(String input, String inputName) {
			policyConfig_.load(input, inputName);
		}
	
		/// <summary>
		/// Load the configuration from the given configSection. This replaces any
		/// existing configuration.
		/// </summary>
		///
		/// <param name="configSection"></param>
		/// <param name="inputName">Used for log messages, etc.</param>
		public void load(BoostInfoTree configSection, String inputName) {
			policyConfig_.load(configSection, inputName);
		}
	
		private readonly ValidationPolicyConfig policyConfig_;
	}
}
