// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.pib {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// In general, a PIB (Public Information Base) stores the public portion of a
	/// user's cryptography keys. The format and location of stored information is
	/// indicated by the PIB locator. A PIB is designed to work with a TPM (Trusted
	/// Platform Module) which stores private keys. There is a one-to-one association
	/// between a PIB and a TPM, and therefore the TPM locator is recorded by the PIB
	/// to enforce this association and prevent one from operating on mismatched PIB
	/// and TPM.
	/// Information in the PIB is organized in a hierarchy of
	/// Identity-Key-Certificate. At the top level, this Pib class provides access to
	/// identities, and allows setting a default identity. Properties of an identity
	/// (such as PibKey objects) can be accessed after obtaining a PibIdentity object.
	/// (Likewise, CertificateV2 objects can be obtained from a PibKey object.)
	/// Note: A Pib instance is created and managed only by the KeyChain, and is
	/// returned by the KeyChain getPib() method.
	/// </summary>
	///
	public class Pib {
		/// <summary>
		/// A Pib.Error extends Exception and represents a semantic error in PIB
		/// processing.
		/// Note that even though this is called "Error" to be consistent with the
		/// other libraries, it extends the Java Exception class, not Error.
		/// </summary>
		///
		[Serializable]
		public class Error : Exception {
			public Error(String message) : base(message) {
			}
		}
	
		/// <summary>
		/// Get the scheme of the PIB locator.
		/// </summary>
		///
		/// <returns>The scheme string.</returns>
		public String getScheme() {
			return scheme_;
		}
	
		/// <summary>
		/// Get the PIB locator.
		/// </summary>
		///
		/// <returns>The PIB locator.</returns>
		public String getPibLocator() {
			return scheme_ + ":" + location_;
		}
	
		/// <summary>
		/// Set the corresponding TPM information to tpmLocator.
		/// If the tpmLocator is different from the existing one, the PIB will be reset.
		/// Otherwise, nothing will be changed.
		/// </summary>
		///
		public void setTpmLocator(String tpmLocator) {
			if (tpmLocator.equals(pibImpl_.getTpmLocator()))
				return;
	
			reset_();
			pibImpl_.setTpmLocator(tpmLocator);
		}
	
		/// <summary>
		/// Get the TPM Locator.
		/// </summary>
		///
		/// <exception cref="Pib.Error">if the TPM locator is empty.</exception>
		public String getTpmLocator() {
			String tpmLocator = pibImpl_.getTpmLocator();
			if (tpmLocator.equals(""))
				throw new Pib.Error ("TPM info does not exist");
	
			return tpmLocator;
		}
	
		/// <summary>
		/// Get the identity with name identityName.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity.</param>
		/// <returns>The PibIdentity object.</returns>
		/// <exception cref="Pib.Error">if the identity does not exist.</exception>
		public PibIdentity getIdentity(Name identityName) {
			// BOOST_ASSERT(identities_.isConsistent());
	
			return identities_.get(identityName);
		}
	
		/// <summary>
		/// Get the default identity.
		/// </summary>
		///
		/// <returns>The PibIdentity object.</returns>
		/// <exception cref="Pib.Error">if there is no default identity.</exception>
		public PibIdentity getDefaultIdentity() {
			// BOOST_ASSERT(identities_.isConsistent());
	
			if (defaultIdentity_ == null)
				defaultIdentity_ = identities_.get(pibImpl_.getDefaultIdentity());
	
			// BOOST_ASSERT(pibImpl_->getDefaultIdentity() == defaultIdentity_->getName());
	
			return defaultIdentity_;
		}
	
		/*
		 * Create a Pib instance. This constructor should only be called by KeyChain.
		 * @param scheme The scheme for the PIB.
		 * @param location The location for the PIB.
		 * @param pibImpl The PIB backend implementation.
		 */
		public Pib(String scheme, String location, PibImpl pibImpl) {
			this.defaultIdentity_ = null;
			scheme_ = scheme;
			location_ = location;
			identities_ = new PibIdentityContainer(pibImpl);
			pibImpl_ = pibImpl;
	
			if (pibImpl == null)
				throw new AssertionError("The pibImpl is null");
		}
	
		/// <summary>
		/// Reset the content in the PIB, including a reset of the TPM locator.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		public void reset_() {
			pibImpl_.clearIdentities();
			pibImpl_.setTpmLocator("");
			defaultIdentity_ = null;
			identities_.reset();
		}
	
		/// <summary>
		/// Add an identity with name identityName. Create the identity if it does not
		/// exist.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity, which is copied.</param>
		/// <returns>The PibIdentity object.</returns>
		public PibIdentity addIdentity_(Name identityName) {
			// BOOST_ASSERT(identities_.isConsistent());
	
			return identities_.add(identityName);
		}
	
		/// <summary>
		/// Remove the identity with name identityName, and its related keys and
		/// certificates. If the default identity is being removed, no default identity
		/// will be selected.  If the identity does not exist, do nothing.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity.</param>
		public void removeIdentity_(Name identityName) {
			// BOOST_ASSERT(identities_.isConsistent());
	
			if (defaultIdentity_ != null
					&& defaultIdentity_.getName().equals(identityName))
				defaultIdentity_ = null;
	
			identities_.remove(identityName);
		}
	
		/// <summary>
		/// Set the identity with name identityName as the default identity.
		/// Create the identity if it does not exist.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity.</param>
		/// <returns>The PibIdentity object of the default identity.</returns>
		public PibIdentity setDefaultIdentity_(Name identityName) {
			// BOOST_ASSERT(identities_.isConsistent());
	
			defaultIdentity_ = identities_.add(identityName);
	
			pibImpl_.setDefaultIdentity(identityName);
			return defaultIdentity_;
		}
	
		/// <summary>
		/// Get the PibIdentityContainer. This should only be called by KeyChain.
		/// </summary>
		///
		public PibIdentityContainer getIdentities_() {
			return identities_;
		}
	
		private readonly String scheme_;
		private readonly String location_;
	
		private PibIdentity defaultIdentity_;
	
		private readonly PibIdentityContainer identities_;
	
		private readonly PibImpl pibImpl_;
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
