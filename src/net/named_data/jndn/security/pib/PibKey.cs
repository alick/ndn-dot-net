// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.pib {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.pib.detail;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// The PibKey class provides access to a key at the second level in the PIB's
	/// Identity-Key-Certificate hierarchy. A PibKey object has a Name
	/// (identity + "KEY" + keyId), and contains one or more CertificateV2
	/// objects, one of which is set as the default certificate of this key.
	/// A certificate can be directly accessed by getting a CertificateV2 object.
	/// </summary>
	///
	public class PibKey {
		/*
		 * Get the key name.
		 * @return The key name. You must not modify the Key object. If you need to
		 * modify it, make a copy.
		 * @throws AssertionError if the backend implementation instance is invalid.
		 */
		public Name getName() {
			return lockImpl().getName();
		}
	
		/// <summary>
		/// Get the name of the identity this key belongs to.
		/// </summary>
		///
		/// <returns>The name of the identity. You must not modify the Key object. If
		/// you need to modify it, make a copy.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		public Name getIdentityName() {
			return lockImpl().getIdentityName();
		}
	
		/// <summary>
		/// Get the key type.
		/// </summary>
		///
		/// <returns>The key type.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		public KeyType getKeyType() {
			return lockImpl().getKeyType();
		}
	
		/// <summary>
		/// Get the public key encoding.
		/// </summary>
		///
		/// <returns>The public key encoding.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		public Blob getPublicKey() {
			return lockImpl().getPublicKey();
		}
	
		/// <summary>
		/// Get the certificate with name certificateName.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <returns>A copy of the CertificateV2 object.</returns>
		/// <exception cref="System.AssertionError">if certificateName does not match the key name, orif the backend implementation instance is invalid.</exception>
		/// <exception cref="Pib.Error">if the certificate does not exist.</exception>
		public CertificateV2 getCertificate(Name certificateName) {
			return lockImpl().getCertificate(certificateName);
		}
	
		/// <summary>
		/// Get the default certificate for this Key.
		/// </summary>
		///
		/// <returns>A copy of the default certificate.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		/// <exception cref="Pib.Error">If the default certificate does not exist.</exception>
		public CertificateV2 getDefaultCertificate() {
			return lockImpl().getDefaultCertificate();
		}
	
		/// <summary>
		/// Construct a key name based on the appropriate naming conventions.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity.</param>
		/// <param name="keyId">The key ID name component.</param>
		/// <returns>The constructed name as a new Name.</returns>
		public static Name constructKeyName(Name identityName, Name.Component keyId) {
			Name keyName = new Name(identityName);
			keyName.append(net.named_data.jndn.security.v2.CertificateV2.KEY_COMPONENT).append(keyId);
	
			return keyName;
		}
	
		/// <summary>
		/// Check if keyName follows the naming conventions for a key name.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		/// <returns>True if keyName follows the naming conventions, otherwise false.</returns>
		public static bool isValidKeyName(Name keyName) {
			return (keyName.size() > net.named_data.jndn.security.v2.CertificateV2.MIN_KEY_NAME_LENGTH && keyName
					.get(-net.named_data.jndn.security.v2.CertificateV2.MIN_KEY_NAME_LENGTH).equals(
							net.named_data.jndn.security.v2.CertificateV2.KEY_COMPONENT));
		}
	
		/// <summary>
		/// Extract the identity namespace from keyName.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		/// <returns>The identity name as a new Name.</returns>
		public static Name extractIdentityFromKeyName(Name keyName) {
			if (!isValidKeyName(keyName))
				throw new ArgumentException("Key name `" + keyName.toUri()
						+ "` does not follow the naming conventions");
	
			// Trim everything after and including "KEY".
			return keyName.getPrefix(-net.named_data.jndn.security.v2.CertificateV2.MIN_KEY_NAME_LENGTH);
		}
	
		/// <summary>
		/// Create a PibKey which uses the impl backend implementation. This
		/// constructor should only be called by PibKeyContainer.
		/// </summary>
		///
		public PibKey(PibKeyImpl impl) {
			impl_ = impl;
		}
	
		/// <summary>
		/// Add the certificate. If a certificate with the same name (without implicit
		/// digest) already exists, then overwrite the certificate. If no default
		/// certificate for the key has been set, then set the added certificate as
		/// default for the key.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="certificate">The certificate to add. This copies the object.</param>
		/// <exception cref="System.ArgumentException">if the name of the certificate does notmatch the key name.</exception>
		public void addCertificate_(CertificateV2 certificate) {
			lockImpl().addCertificate(certificate);
		}
	
		/// <summary>
		/// Remove the certificate with name certificateName. If the certificate does
		/// not exist, do nothing.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <exception cref="System.ArgumentException">if certificateName does not match the keyname.</exception>
		public void removeCertificate_(Name certificateName) {
			lockImpl().removeCertificate(certificateName);
		}
	
		/// <summary>
		/// Set the existing certificate with name certificateName as the default
		/// certificate.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <returns>The default certificate.</returns>
		/// <exception cref="System.ArgumentException">if certificateName does not match the keyname</exception>
		/// <exception cref="Pib.Error">if the certificate does not exist.</exception>
		public CertificateV2 setDefaultCertificate_(Name certificateName) {
			return lockImpl().setDefaultCertificate(certificateName);
		}
	
		/// <summary>
		/// Add the certificate and set it as the default certificate of the key.
		/// If a certificate with the same name (without implicit digest) already
		/// exists, then overwrite the certificate.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="certificate">The certificate to add. This copies the object.</param>
		/// <exception cref="System.ArgumentException">if the name of the certificate does notmatch the key name.</exception>
		/// <returns>The default certificate.</returns>
		public CertificateV2 setDefaultCertificate_(CertificateV2 certificate) {
			return lockImpl().setDefaultCertificate(certificate);
		}
	
		/// <summary>
		/// Get the PibCertificateContainer in the PibKeyImpl. This should only be
		/// called by KeyChain.
		/// </summary>
		///
		/// <returns>The PibCertificateContainer.</returns>
		public PibCertificateContainer getCertificates_() {
			return lockImpl().getCertificates_();
		}
	
		/// <summary>
		/// Check the validity of the impl_ instance.
		/// </summary>
		///
		/// <returns>The PibKeyImpl when the instance is valid.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		private PibKeyImpl lockImpl() {
			if (impl_ == null)
				throw new AssertionError("Invalid key instance");
	
			return impl_;
		}
	
		private readonly PibKeyImpl impl_;
	}
}
