// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.pib.detail {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.certificate;
	using net.named_data.jndn.security.pib;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// PibKeyImpl provides the backend implementation for PibKey. A PibKey has only
	/// one backend instance, but may have multiple frontend handles. Each frontend
	/// handle is associated with the only one backend PibKeyImpl.
	/// </summary>
	///
	public class PibKeyImpl {
		/// <summary>
		/// Create a PibKeyImpl with keyName. If the key does not exist in the backend
		/// implementation, add it by creating it from the keyEncoding. If a key with
		/// keyName already exists, overwrite it.
		/// </summary>
		///
		/// <param name="keyName">The name of the key, which is copied.</param>
		/// <param name="keyEncoding">The buffer of encoded key bytes, which is copied.</param>
		/// <param name="pibImpl">The Pib backend implementation.</param>
		public PibKeyImpl(Name keyName, ByteBuffer keyEncoding, PibImpl pibImpl) {
			this.defaultCertificate_ = null;
			identityName_ = net.named_data.jndn.security.pib.PibKey.extractIdentityFromKeyName(keyName);
			keyName_ = new Name(keyName);
			keyEncoding_ = new Blob(keyEncoding, true);
			certificates_ = new PibCertificateContainer(keyName, pibImpl);
			pibImpl_ = pibImpl;
	
			if (pibImpl == null)
				throw new AssertionError("The pibImpl is null");
	
			try {
				PublicKey publicKey = new PublicKey(keyEncoding_);
				keyType_ = publicKey.getKeyType();
			} catch (UnrecognizedKeyFormatException ex) {
				throw new ArgumentException("Invalid key encoding");
			}
	
			pibImpl_.addKey(identityName_, keyName_, keyEncoding);
		}
	
		/// <summary>
		/// Create a PibKeyImpl with keyName. Initialize the cached key encoding with
		/// pibImpl.getKeyBits().
		/// </summary>
		///
		/// <param name="keyName">The name of the key, which is copied.</param>
		/// <param name="pibImpl">The Pib backend implementation.</param>
		/// <exception cref="Pib.Error">if the key with keyName does not exist.</exception>
		public PibKeyImpl(Name keyName, PibImpl pibImpl) {
			this.defaultCertificate_ = null;
			identityName_ = net.named_data.jndn.security.pib.PibKey.extractIdentityFromKeyName(keyName);
			keyName_ = new Name(keyName);
			certificates_ = new PibCertificateContainer(keyName, pibImpl);
			pibImpl_ = pibImpl;
	
			if (pibImpl == null)
				throw new AssertionError("The pibImpl is null");
	
			keyEncoding_ = pibImpl_.getKeyBits(keyName_);
	
			PublicKey publicKey;
			try {
				publicKey = new PublicKey(keyEncoding_);
			} catch (UnrecognizedKeyFormatException ex) {
				// We don't expect this since we just fetched the encoding.
				throw new Pib.Error("Error decoding public key: " + ex);
			}
			keyType_ = publicKey.getKeyType();
		}
	
		/*
		 * Get the key name.
		 * @return The key name. You must not change the object. If you need to change
		 * it, make a copy.
		 */
		public Name getName() {
			return keyName_;
		}
	
		/// <summary>
		/// Get the name of the identity this key belongs to.
		/// </summary>
		///
		/// <returns>The name of the identity. You must not change the object. If you
		/// need to change it, make a copy.</returns>
		public Name getIdentityName() {
			return identityName_;
		}
	
		/// <summary>
		/// Get the key type.
		/// </summary>
		///
		/// <returns>The key type.</returns>
		public KeyType getKeyType() {
			return keyType_;
		}
	
		/// <summary>
		/// Get the public key encoding.
		/// </summary>
		///
		/// <returns>The public key encoding.</returns>
		public Blob getPublicKey() {
			return keyEncoding_;
		}
	
		/// <summary>
		/// Add the certificate. If a certificate with the same name (without implicit
		/// digest) already exists, then overwrite the certificate. If no default
		/// certificate for the key has been set, then set the added certificate as
		/// default for the key.
		/// </summary>
		///
		/// <param name="certificate">The certificate to add. This copies the object.</param>
		/// <exception cref="System.ArgumentException">if the name of the certificate does notmatch the key name.</exception>
		public void addCertificate(CertificateV2 certificate) {
			// BOOST_ASSERT(certificates_.isConsistent());
			certificates_.add(certificate);
		}
	
		/// <summary>
		/// Remove the certificate with name certificateName. If the certificate does
		/// not exist, do nothing.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <exception cref="System.ArgumentException">if certificateName does not match the keyname.</exception>
		public void removeCertificate(Name certificateName) {
			// BOOST_ASSERT(certificates_.isConsistent());
	
			if (defaultCertificate_ != null
					&& defaultCertificate_.getName().equals(certificateName))
				defaultCertificate_ = null;
	
			certificates_.remove(certificateName);
		}
	
		/// <summary>
		/// Get the certificate with name certificateName.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <returns>A copy of the CertificateV2 object.</returns>
		/// <exception cref="System.ArgumentException">if certificateName does not match the key name.</exception>
		/// <exception cref="Pib.Error">if the certificate does not exist.</exception>
		public CertificateV2 getCertificate(Name certificateName) {
			// BOOST_ASSERT(certificates_.isConsistent());
			return certificates_.get(certificateName);
		}
	
		/// <summary>
		/// Set the existing certificate with name certificateName as the default
		/// certificate.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <returns>The default certificate.</returns>
		/// <exception cref="System.ArgumentException">if certificateName does not match the keyname</exception>
		/// <exception cref="Pib.Error">if the certificate does not exist.</exception>
		public CertificateV2 setDefaultCertificate(Name certificateName) {
			// BOOST_ASSERT(certificates_.isConsistent());
	
			defaultCertificate_ = certificates_.get(certificateName);
			pibImpl_.setDefaultCertificateOfKey(keyName_, certificateName);
			return defaultCertificate_;
		}
	
		/// <summary>
		/// Add the certificate and set it as the default certificate of the key.
		/// If a certificate with the same name (without implicit digest) already
		/// exists, then overwrite the certificate.
		/// </summary>
		///
		/// <param name="certificate">The certificate to add. This copies the object.</param>
		/// <exception cref="System.ArgumentException">if the name of the certificate does notmatch the key name.</exception>
		/// <returns>The default certificate.</returns>
		public CertificateV2 setDefaultCertificate(CertificateV2 certificate) {
			addCertificate(certificate);
			return setDefaultCertificate(certificate.getName());
		}
	
		/// <summary>
		/// Get the default certificate for this Key.
		/// </summary>
		///
		/// <returns>A copy of the default certificate.</returns>
		/// <exception cref="Pib.Error">if the default certificate does not exist.</exception>
		public CertificateV2 getDefaultCertificate() {
			// BOOST_ASSERT(certificates_.isConsistent());
	
			if (defaultCertificate_ == null)
				defaultCertificate_ = pibImpl_.getDefaultCertificateOfKey(keyName_);
	
			// BOOST_ASSERT(pibImpl_->getDefaultCertificateOfKey(keyName_)->wireEncode() == defaultCertificate_->wireEncode());
	
			return defaultCertificate_;
		}
	
		/// <summary>
		/// Get the certificates_ container, which should only be used for testing.
		/// </summary>
		///
		public PibCertificateContainer getCertificates_() {
			return certificates_;
		}
	
		private readonly Name identityName_;
		private readonly Name keyName_;
		private readonly Blob keyEncoding_;
		private readonly KeyType keyType_;
	
		private CertificateV2 defaultCertificate_;
	
		private readonly PibCertificateContainer certificates_;
	
		private readonly PibImpl pibImpl_;
	}
}
