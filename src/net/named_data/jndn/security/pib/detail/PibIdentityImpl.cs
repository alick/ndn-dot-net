// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.pib.detail {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security.pib;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// PibIdentityImpl provides the backend implementation for PibIdentity. A
	/// PibIdentity has only one backend instance, but may have multiple frontend
	/// handles. Each frontend handle is associated with the only one backend
	/// PibIdentityImpl.
	/// </summary>
	///
	public class PibIdentityImpl {
		/// <summary>
		/// Create a PibIdentityImpl with identityName.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity, which is copied.</param>
		/// <param name="pibImpl">The Pib backend implementation.</param>
		/// <param name="needInit">becomes the default). If false, then throw Pib.Error if the identity does not exist in the pibImpl back end.</param>
		/// <exception cref="Pib.Error">if the identity does not exist in the pibImpl back endand needInit is false.</exception>
		public PibIdentityImpl(Name identityName, PibImpl pibImpl, bool needInit) {
			this.defaultKey_ = null;
			// Copy the Name.
			identityName_ = new Name(identityName);
			keys_ = new PibKeyContainer(identityName, pibImpl);
			pibImpl_ = pibImpl;
	
			if (pibImpl == null)
				throw new AssertionError("The pibImpl is null");
	
			if (needInit)
				pibImpl_.addIdentity(identityName_);
			else {
				if (!pibImpl_.hasIdentity(identityName_))
					throw new Pib.Error("Identity " + identityName_.toUri()
							+ " does not exist");
			}
		}
	
		/*
		 * Get the name of the identity.
		 * @return The name of the identity. You must not change the Name object. If
		 * you need to change it then make a copy.
		 */
		public Name getName() {
			return identityName_;
		}
	
		/// <summary>
		/// Add the key. If a key with the same name already exists, overwrite the key.
		/// If no default key for the identity has been set, then set the added key as
		/// default for the identity.
		/// </summary>
		///
		/// <param name="key">The public key bits. This copies the buffer.</param>
		/// <param name="keyName">The name of the key. This copies the name.</param>
		/// <returns>The PibKey object.</returns>
		public PibKey addKey(ByteBuffer key, Name keyName) {
			// BOOST_ASSERT(keys_.isConsistent());
	
			return keys_.add(key, keyName);
		}
	
		/// <summary>
		/// Remove the key with keyName and its related certificates. If the key does
		/// not exist, do nothing.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		public void removeKey(Name keyName) {
			// BOOST_ASSERT(keys_.isConsistent());
	
			if (defaultKey_ != null && defaultKey_.getName().equals(keyName))
				defaultKey_ = null;
	
			keys_.remove(keyName);
		}
	
		/// <summary>
		/// Get the key with name keyName.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		/// <returns>The PibKey object.</returns>
		/// <exception cref="System.ArgumentException">if keyName does not match the identity name.</exception>
		/// <exception cref="Pib.Error">if the key does not exist.</exception>
		public PibKey getKey(Name keyName) {
			// BOOST_ASSERT(keys_.isConsistent());
	
			return keys_.get(keyName);
		}
	
		/// <summary>
		/// Set the key with name keyName as the default key of the identity.
		/// </summary>
		///
		/// <param name="keyName">The name of the key. This copies the name.</param>
		/// <returns>The PibKey object of the default key.</returns>
		/// <exception cref="System.ArgumentException">if the name of the key does not match theidentity name.</exception>
		/// <exception cref="Pib.Error">if the key does not exist.</exception>
		public PibKey setDefaultKey(Name keyName) {
			// BOOST_ASSERT(keys_.isConsistent());
	
			defaultKey_ = keys_.get(keyName);
			pibImpl_.setDefaultKeyOfIdentity(identityName_, keyName);
			return defaultKey_;
		}
	
		/// <summary>
		/// Add a key with name keyName and set it as the default key of the identity.
		/// </summary>
		///
		/// <param name="key">The buffer of encoded key bytes.</param>
		/// <param name="keyName">The name of the key, which is copied.</param>
		/// <returns>The PibKey object of the default key.</returns>
		/// <exception cref="System.ArgumentException">if the name of the key does not match theidentity name.</exception>
		/// <exception cref="Pib.Error">if a key with the same name already exists.</exception>
		public PibKey setDefaultKey(ByteBuffer key, Name keyName) {
			addKey(key, keyName);
			return setDefaultKey(keyName);
		}
	
		/// <summary>
		/// Get the default key of this Identity.
		/// </summary>
		///
		/// <returns>The default PibKey.</returns>
		/// <exception cref="Pib.Error">if the default key has not been set.</exception>
		public PibKey getDefaultKey() {
			// BOOST_ASSERT(keys_.isConsistent());
	
			if (defaultKey_ == null)
				defaultKey_ = keys_.get(pibImpl_
						.getDefaultKeyOfIdentity(identityName_));
	
			// BOOST_ASSERT(pibImpl_->getDefaultKeyOfIdentity(identityName_) == defaultKey_.getName());
	
			return defaultKey_;
		}
	
		/// <summary>
		/// Get the PibKeyContainer. This should only be called by PibIdentity.
		/// </summary>
		///
		public PibKeyContainer getKeys_() {
			return keys_;
		}
	
		private readonly Name identityName_;
		private PibKey defaultKey_;
	
		private readonly PibKeyContainer keys_;
	
		private readonly PibImpl pibImpl_;
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
