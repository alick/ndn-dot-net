// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.pib {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security.pib.detail;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// PibIdentity is at the top level in PIB's Identity-Key-Certificate hierarchy.
	/// An identity has a Name, and contains zero or more keys, at most one of which
	/// is set as the default key of this identity.  Properties of a key can be
	/// accessed after obtaining a Key object.
	/// </summary>
	///
	public class PibIdentity {
		/*
		 * Get the name of the identity.
		 * @return The name of the identity. You must not change the Name object. If
		 * you need to change it then make a copy.
		 * @throws AssertionError if the backend implementation instance is invalid.
		 */
		public Name getName() {
			return lockImpl().getName();
		}
	
		/// <summary>
		/// Get the key with name keyName.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		/// <returns>The PibKey object.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		/// <exception cref="System.ArgumentException">if keyName does not match the identity name.</exception>
		/// <exception cref="Pib.Error">if the key does not exist.</exception>
		public PibKey getKey(Name keyName) {
			return lockImpl().getKey(keyName);
		}
	
		/// <summary>
		/// Get the default key of this Identity.
		/// </summary>
		///
		/// <returns>The default PibKey.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		/// <exception cref="Pib.Error">if the default key has not been set.</exception>
		public PibKey getDefaultKey() {
			return lockImpl().getDefaultKey();
		}
	
		/// <summary>
		/// Create a PibIdentity which uses the impl backend implementation. This
		/// constructor should only be called by PibIdentityContainer.
		/// </summary>
		///
		public PibIdentity(PibIdentityImpl impl) {
			impl_ = impl;
		}
	
		/// <summary>
		/// Add the key. If a key with the same name already exists, overwrite the key.
		/// If no default key for the identity has been set, then set the added key as
		/// default for the identity. This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="key">The public key bits. This copies the array.</param>
		/// <param name="keyName">The name of the key. This copies the name.</param>
		/// <returns>The PibKey object.</returns>
		public PibKey addKey_(ByteBuffer key, Name keyName) {
			return lockImpl().addKey(key, keyName);
		}
	
		/// <summary>
		/// Remove the key with keyName and its related certificates. If the key does
		/// not exist, do nothing. This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		public void removeKey_(Name keyName) {
			lockImpl().removeKey(keyName);
		}
	
		/// <summary>
		/// Set the key with name keyName as the default key of the identity. This
		/// should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="keyName">The name of the key. This copies the name.</param>
		/// <returns>The PibKey object of the default key.</returns>
		/// <exception cref="System.ArgumentException">if the name of the key does not match theidentity name.</exception>
		/// <exception cref="Pib.Error">if the key does not exist.</exception>
		public PibKey setDefaultKey_(Name keyName) {
			return lockImpl().setDefaultKey(keyName);
		}
	
		/// <summary>
		/// Add a key with name keyName and set it as the default key of the identity.
		/// This should only be called by KeyChain.
		/// </summary>
		///
		/// <param name="key">The array of encoded key bytes.</param>
		/// <param name="keyName">The name of the key, which is copied.</param>
		/// <returns>The PibKey object of the default key.</returns>
		/// <exception cref="System.ArgumentException">if the name of the key does not match theidentity name.</exception>
		/// <exception cref="Pib.Error">if a key with the same name already exists.</exception>
		public PibKey setDefaultKey_(ByteBuffer key, Name keyName) {
			return lockImpl().setDefaultKey(key, keyName);
		}
	
		/// <summary>
		/// Get the PibKeyContainer in the PibIdentityImpl. This should only be called
		/// by KeyChain.
		/// </summary>
		///
		public PibKeyContainer getKeys_() {
			return lockImpl().getKeys_();
		}
	
		/// <summary>
		/// Check the validity of the impl_ instance.
		/// </summary>
		///
		/// <returns>The PibIdentityImpl when the instance is valid.</returns>
		/// <exception cref="System.AssertionError">if the backend implementation instance is invalid.</exception>
		private PibIdentityImpl lockImpl() {
			if (impl_ == null)
				throw new AssertionError("Invalid Identity instance");
	
			return impl_;
		}
	
		private readonly PibIdentityImpl impl_;
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
