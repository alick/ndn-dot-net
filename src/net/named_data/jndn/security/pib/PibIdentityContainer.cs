// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.pib {
	
	using ILOG.J2CsMapping.Collections;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security.pib.detail;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// A PibIdentityContainer is used to search/enumerate the identities in a PIB.
	/// (A PibIdentityContainer object can only be created by the Pib class.)
	/// </summary>
	///
	public class PibIdentityContainer {
		/// <summary>
		/// Get the number of identities in the container.
		/// </summary>
		///
		/// <returns>The number of identities.</returns>
		public int size() {
			return identityNames_.Count;
		}
	
		/// <summary>
		/// Add an identity with name identityName into the container. Create the
		/// identity if it does not exist.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity, which is copied.</param>
		/// <returns>The PibIdentity object.</returns>
		public PibIdentity add(Name identityName) {
			if (!ILOG.J2CsMapping.Collections.Collections.Contains(identityName,identityNames_)) {
				Name identityNameCopy = new Name(identityName);
				ILOG.J2CsMapping.Collections.Collections.Add(identityNames_,identityNameCopy);
				ILOG.J2CsMapping.Collections.Collections.Put(identities_,identityNameCopy,new PibIdentityImpl(identityName,
									pibImpl_, true));
			}
	
			return get(identityName);
		}
	
		/// <summary>
		/// Remove the identity with name identityName from the container, and its
		/// related keys and certificates. If the default identity is being removed,
		/// no default identity will be selected.  If the identity does not exist, do
		/// nothing.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity.</param>
		public void remove(Name identityName) {
			ILOG.J2CsMapping.Collections.Collections.Remove(identityNames_,identityName);
			ILOG.J2CsMapping.Collections.Collections.Remove(identities_,identityName);
			pibImpl_.removeIdentity(identityName);
		}
	
		/// <summary>
		/// Get the identity with name identityName from the container.
		/// </summary>
		///
		/// <param name="identityName">The name of the identity.</param>
		/// <returns>The PibIdentity object.</returns>
		/// <exception cref="Pib.Error">if the identity does not exist.</exception>
		public PibIdentity get(Name identityName) {
			PibIdentityImpl pibIdentityImpl = ILOG.J2CsMapping.Collections.Collections.Get(identities_,identityName);
	
			if (pibIdentityImpl == null) {
				pibIdentityImpl = new PibIdentityImpl(identityName, pibImpl_, false);
				// Copy the Name.
				ILOG.J2CsMapping.Collections.Collections.Put(identities_,new Name(identityName),pibIdentityImpl);
			}
	
			return new PibIdentity(pibIdentityImpl);
		}
	
		/// <summary>
		/// Reset the state of the container. This method removes all loaded identities
		/// and retrieves identity names from the PIB implementation.
		/// </summary>
		///
		internal void reset() {
			identities_.clear();
			identityNames_ = pibImpl_.getIdentities();
		}
	
		/// <summary>
		/// Check if the container is consistent with the backend storage.
		/// </summary>
		///
		/// <returns>True if the container is consistent, false otherwise.</returns>
		/// @note This method is heavy-weight and should be used in a debugging mode
		/// only.
		internal bool isConsistent() {
			return identityNames_.equals(pibImpl_.getIdentities());
		}
	
		/// <summary>
		/// Create a PibIdentityContainer using to use the pibImpl backend
		/// implementation. This constructor should only be called by the Pib class.
		/// </summary>
		///
		/// <param name="pibImpl">The PIB backend implementation.</param>
		public PibIdentityContainer(PibImpl pibImpl) {
			this.identities_ = new Hashtable<Name, PibIdentityImpl>();
			pibImpl_ = pibImpl;
	
			if (pibImpl == null)
				throw new AssertionError("The pibImpl is null");
	
			identityNames_ = pibImpl_.getIdentities();
		}
	
		/// <summary>
		/// Get the identities_ map, which should only be used for testing.
		/// </summary>
		///
		public Hashtable<Name, PibIdentityImpl> getIdentities_() {
			return identities_;
		}
	
		private HashedSet<Name> identityNames_;
		// Cache of loaded PibIdentityImpl objects.
		private readonly Hashtable<Name, PibIdentityImpl> identities_;
	
		private readonly PibImpl pibImpl_;
	
		// This is to force an import of net.named_data.jndn.util.
		private static Common dummyCommon_ = new Common();
	}
}
