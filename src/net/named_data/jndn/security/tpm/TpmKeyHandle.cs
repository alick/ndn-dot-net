// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.tpm {
	
	using ILOG.J2CsMapping.NIO;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// TpmKeyHandle is an abstract base class for a TPM key handle, which provides
	/// an interface to perform cryptographic operations with a key in the TPM.
	/// </summary>
	///
	public abstract class TpmKeyHandle {
		public TpmKeyHandle() {
			this.keyName_ = new Name();
		}
	
		/// <summary>
		/// Compute a digital signature from the byte buffer using this key with
		/// digestAlgorithm.
		/// </summary>
		///
		/// <param name="digestAlgorithm">The digest algorithm.</param>
		/// <param name="data">The input byte buffer.</param>
		/// <returns>The signature Blob, or an isNull Blob for an unrecognized
		/// digestAlgorithm.</returns>
		public Blob sign(DigestAlgorithm digestAlgorithm, ByteBuffer data) {
			return doSign(digestAlgorithm, data);
		}
	
		/// <summary>
		/// Return the plain text which is decrypted from cipherText using this key.
		/// </summary>
		///
		/// <param name="cipherText">The cipher text byte buffer.</param>
		/// <returns>The decrypted data.</returns>
		public Blob decrypt(ByteBuffer cipherText) {
			return doDecrypt(cipherText);
		}
	
		/// <summary>
		/// Get the encoded public key derived from this key.
		/// </summary>
		///
		/// <returns>The public key encoding Blob.</returns>
		public Blob derivePublicKey() {
			return doDerivePublicKey();
		}
	
		public void setKeyName(Name keyName) {
			keyName_ = new Name(keyName);
		}
	
		public Name getKeyName() {
			return keyName_;
		}
	
		protected abstract internal Blob doSign(DigestAlgorithm digestAlgorithm,
				ByteBuffer data);
	
		protected abstract internal Blob doDecrypt(ByteBuffer cipherText);
	
		protected abstract internal Blob doDerivePublicKey();
	
		private Name keyName_;
	}
}
