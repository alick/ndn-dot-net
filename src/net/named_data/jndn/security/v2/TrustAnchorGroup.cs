// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2 {
	
	using ILOG.J2CsMapping.Collections;
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	using net.named_data.jndn;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// TrustAnchorGroup represents a group of trust anchors which implement the
	/// CertificateContainerInterface.
	/// </summary>
	///
	public class TrustAnchorGroup {
		/// <summary>
		/// Create a TrustAnchorGroup to use an existing container.
		/// </summary>
		///
		/// <param name="certificateContainer">The existing certificate container.</param>
		/// <param name="id">The group ID.</param>
		public TrustAnchorGroup(CertificateContainerInterface certificateContainer,
				String id) {
			this.anchorNames_ = new HashedSet<Name>();
			certificates_ = certificateContainer;
			id_ = id;
		}
	
		/// <summary>
		/// Get the group id given to the constructor.
		/// </summary>
		///
		/// <returns>The group id.</returns>
		public String getId() {
			return id_;
		}
	
		/// <summary>
		/// Get the number of certificates in the group.
		/// </summary>
		///
		/// <returns>The number of certificates.</returns>
		public int size() {
			return anchorNames_.Count;
		}
	
		/// <summary>
		/// Request a certificate refresh. The base method does nothing.
		/// </summary>
		///
		public virtual void refresh() {
		}
	
		/// <summary>
		/// Read a base-64-encoded certificate from a file.
		/// </summary>
		///
		/// <param name="filePath">The certificate file path.</param>
		/// <returns>The decoded certificate, or null if there is an error.</returns>
		public static CertificateV2 readCertificate(String filePath) {
			StringBuilder encodedData = new StringBuilder();
	
			try {
				TextReader certificateFile = new FileReader(
									filePath);
				// Use "try/finally instead of "try-with-resources" or "using"
				// which are not supported before Java 7.
				try {
					String line;
					while ((line = certificateFile.readLine()) != null)
						encodedData.append(line);
				} finally {
					certificateFile.close();
				}
			} catch (FileNotFoundException ex) {
				return null;
			} catch (IOException ex_0) {
				return null;
			}
	
			byte[] decodedData = net.named_data.jndn.util.Common.base64Decode(encodedData.toString());
			CertificateV2 result = new CertificateV2();
			try {
				result.wireDecode(new Blob(decodedData, false));
				return result;
			} catch (Exception ex_1) {
				return null;
			}
		}
	
		protected internal readonly CertificateContainerInterface certificates_;
		protected internal readonly HashedSet<Name> anchorNames_;
		private readonly String id_;
	}
}
