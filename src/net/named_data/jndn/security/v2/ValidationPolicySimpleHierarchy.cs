// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2 {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	
	/// <summary>
	/// ValidationPolicySimpleHierarchy extends ValidationPolicy to implement a
	/// Validation policy for a simple hierarchical trust model.
	/// </summary>
	///
	public class ValidationPolicySimpleHierarchy : ValidationPolicy {
		public override void checkPolicy(Data data, ValidationState state,
				ValidationPolicy.ValidationContinuation  continueValidation) {
			Name keyLocatorName = net.named_data.jndn.security.v2.ValidationPolicy.getKeyLocatorName(data, state);
			if (state.isOutcomeFailed())
				// Already called state.fail().)
				return;
	
			if (keyLocatorName.getPrefix(-2).isPrefixOf(data.getName()))
				continueValidation.continueValidation(new CertificateRequest(
						new Interest(keyLocatorName)), state);
			else
				state.fail(new ValidationError(net.named_data.jndn.security.v2.ValidationError.INVALID_KEY_LOCATOR,
						"Data signing policy violation for "
								+ data.getName().toUri() + " by "
								+ keyLocatorName.toUri()));
		}
	
		public override void checkPolicy(Interest interest, ValidationState state,
				ValidationPolicy.ValidationContinuation  continueValidation) {
			Name keyLocatorName = net.named_data.jndn.security.v2.ValidationPolicy.getKeyLocatorName(interest, state);
			if (state.isOutcomeFailed())
				// Already called state.fail().)
				return;
	
			if (keyLocatorName.getPrefix(-2).isPrefixOf(interest.getName()))
				continueValidation.continueValidation(new CertificateRequest(
						new Interest(keyLocatorName)), state);
			else
				state.fail(new ValidationError(net.named_data.jndn.security.v2.ValidationError.INVALID_KEY_LOCATOR,
						"Interest signing policy violation for "
								+ interest.getName().toUri() + " by "
								+ keyLocatorName.toUri()));
		}
	
	}
}
