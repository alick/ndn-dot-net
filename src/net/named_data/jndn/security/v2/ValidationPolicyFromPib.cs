// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2 {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.pib;
	
	/// <summary>
	/// ValidationPolicyFromPib extends ValidationPolicy to implement a validator
	/// policy that validates a packet using the default certificate of the key in
	/// the PIB that is named by the packet's KeyLocator.
	/// </summary>
	///
	public class ValidationPolicyFromPib : ValidationPolicy {
		/// <summary>
		/// Create a ValidationPolicyFromPib to use the given PIB.
		/// </summary>
		///
		/// <param name="pib">The PIB with certificates.</param>
		public ValidationPolicyFromPib(Pib pib) {
			pib_ = pib;
		}
	
		public override void checkPolicy(Data data, ValidationState state,
				ValidationPolicy.ValidationContinuation  continueValidation) {
			Name keyName = net.named_data.jndn.security.v2.ValidationPolicy.getKeyLocatorName(data, state);
			if (state.isOutcomeFailed())
				// Already called state.fail() .
				return;
	
			checkPolicyHelper(keyName, state, continueValidation);
		}
	
		public override void checkPolicy(Interest interest, ValidationState state,
				ValidationPolicy.ValidationContinuation  continueValidation) {
			Name keyName = net.named_data.jndn.security.v2.ValidationPolicy.getKeyLocatorName(interest, state);
			if (state.isOutcomeFailed())
				// Already called state.fail() .
				return;
	
			checkPolicyHelper(keyName, state, continueValidation);
		}
	
		private void checkPolicyHelper(Name keyName, ValidationState state,
				ValidationPolicy.ValidationContinuation  continueValidation) {
			PibIdentity identity;
			try {
				identity = pib_.getIdentity(net.named_data.jndn.security.pib.PibKey
						.extractIdentityFromKeyName(keyName));
			} catch (Exception ex) {
				state.fail(new ValidationError(
						net.named_data.jndn.security.v2.ValidationError.CANNOT_RETRIEVE_CERTIFICATE,
						"Cannot get the PIB identity for key " + keyName.toUri()
								+ ": " + ex));
				return;
			}
	
			PibKey key;
			try {
				key = identity.getKey(keyName);
			} catch (Exception ex_0) {
				state.fail(new ValidationError(
						net.named_data.jndn.security.v2.ValidationError.CANNOT_RETRIEVE_CERTIFICATE,
						"Cannot get the PIB key " + keyName.toUri() + ": " + ex_0));
				return;
			}
	
			CertificateV2 certificate;
			try {
				certificate = key.getDefaultCertificate();
			} catch (Exception ex_1) {
				state.fail(new ValidationError(
						net.named_data.jndn.security.v2.ValidationError.CANNOT_RETRIEVE_CERTIFICATE,
						"Cannot get the default certificate for key "
								+ keyName.toUri() + ": " + ex_1));
				return;
			}
	
			// Add the certificate as the temporary trust anchor.
			validator_.resetAnchors();
			try {
				validator_.loadAnchor("", certificate);
			} catch (Exception ex_2) {
				// We don't expect this since we just retrieved the certificate.
				state.fail(new ValidationError(
						net.named_data.jndn.security.v2.ValidationError.CANNOT_RETRIEVE_CERTIFICATE,
						"Cannot load the trust anchor for key " + keyName.toUri()
								+ ": " + ex_2));
				return;
			}
	
			continueValidation.continueValidation(new CertificateRequest(
					new Interest(keyName)), state);
			// Clear the temporary trust anchor.
			validator_.resetAnchors();
		}
	
		private readonly Pib pib_;
	}
}
