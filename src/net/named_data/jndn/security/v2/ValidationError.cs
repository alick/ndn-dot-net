// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2 {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A ValidationError holds an error code and an optional detailed error message.
	/// </summary>
	///
	public class ValidationError {
		public const int NO_ERROR = 0;
		public const int INVALID_SIGNATURE = 1;
		public const int NO_SIGNATURE = 2;
		public const int CANNOT_RETRIEVE_CERTIFICATE = 3;
		public const int EXPIRED_CERTIFICATE = 4;
		public const int LOOP_DETECTED = 5;
		public const int MALFORMED_CERTIFICATE = 6;
		public const int EXCEEDED_DEPTH_LIMIT = 7;
		public const int INVALID_KEY_LOCATOR = 8;
		public const int POLICY_ERROR = 9;
		public const int IMPLEMENTATION_ERROR = 255;
		// Custom error codes should use >= USER_MIN.
		public const int USER_MIN = 256;
	
		/// <summary>
		/// Create a new ValidationError for the given code.
		/// </summary>
		///
		/// <param name="code"></param>
		/// <param name="info">The error message.</param>
		public ValidationError(int code, String info) {
			code_ = code;
			info_ = info;
		}
	
		/// <summary>
		/// Create a new ValidationError for the given code and an empty error message.
		/// </summary>
		///
		/// <param name="code"></param>
		public ValidationError(int code) {
			code_ = code;
			info_ = "";
		}
	
		/// <summary>
		/// Get the error code given to the constructor.
		/// </summary>
		///
		/// <returns>The error code which is one of the standard error codes such as
		/// INVALID_SIGNATURE, or a custom code if greater than or equal to USER_MIN.</returns>
		public int getCode() {
			return code_;
		}
	
		/// <summary>
		/// Get the error message given to the constructor.
		/// </summary>
		///
		/// <returns>The error message, or "" if none.</returns>
		public String getInfo() {
			return info_;
		}
	
		/// <summary>
		/// Get a string representation of this ValidationError.
		/// </summary>
		///
		/// <returns>The string representation.</returns>
		public override String ToString() {
			String result;
	
			if (code_ == ValidationError.NO_ERROR)
				result = "No error";
			else if (code_ == ValidationError.INVALID_SIGNATURE)
				result = "Invalid signature";
			else if (code_ == ValidationError.NO_SIGNATURE)
				result = "Missing signature";
			else if (code_ == ValidationError.CANNOT_RETRIEVE_CERTIFICATE)
				result = "Cannot retrieve certificate";
			else if (code_ == ValidationError.EXPIRED_CERTIFICATE)
				result = "Certificate expired";
			else if (code_ == ValidationError.LOOP_DETECTED)
				result = "Loop detected in certification chain";
			else if (code_ == ValidationError.MALFORMED_CERTIFICATE)
				result = "Malformed certificate";
			else if (code_ == ValidationError.EXCEEDED_DEPTH_LIMIT)
				result = "Exceeded validation depth limit";
			else if (code_ == ValidationError.INVALID_KEY_LOCATOR)
				result = "Key locator violates validation policy";
			else if (code_ == ValidationError.POLICY_ERROR)
				result = "Validation policy error";
			else if (code_ == ValidationError.IMPLEMENTATION_ERROR)
				result = "Internal implementation error";
			else if (code_ >= ValidationError.USER_MIN)
				result = "Custom error code " + code_;
			else
				result = "Unrecognized error code " + code_;
	
			if (info_.Length > 0)
				result += " (" + info_ + ")";
	
			return result;
		}
	
		private int code_;
		private String info_;
	}
}
