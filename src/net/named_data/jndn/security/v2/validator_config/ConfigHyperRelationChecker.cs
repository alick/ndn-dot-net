// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2.validator_config {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.v2;
	using net.named_data.jndn.util.regex;
	
	public class ConfigHyperRelationChecker : ConfigChecker {
		public ConfigHyperRelationChecker(String packetNameRegexString,
				String packetNameExpansion, String keyNameRegexString,
				String keyNameExpansion, ConfigNameRelation.Relation hyperRelation) {
			packetNameRegex_ = new NdnRegexTopMatcher(packetNameRegexString);
			packetNameExpansion_ = packetNameExpansion;
			keyNameRegex_ = new NdnRegexTopMatcher(keyNameRegexString);
			keyNameExpansion_ = keyNameExpansion;
			hyperRelation_ = hyperRelation;
		}
	
		protected internal override bool checkNames(Name packetName, Name keyLocatorName,
				ValidationState state) {
			bool isMatch;
			try {
				isMatch = packetNameRegex_.match(packetName);
			} catch (NdnRegexMatcherBase.Error ex) {
				throw new ValidatorConfigError("Error in regex match: " + ex);
			}
			if (!isMatch) {
				state.fail(new ValidationError(
						net.named_data.jndn.security.v2.ValidationError.POLICY_ERROR,
						"The packet "
								+ packetName.toUri()
								+ " (KeyLocator="
								+ keyLocatorName.toUri()
								+ ") does not match the hyper relation packet name regex "
								+ packetNameRegex_.getExpr()));
				return false;
			}
	
			try {
				isMatch = keyNameRegex_.match(keyLocatorName);
			} catch (NdnRegexMatcherBase.Error ex_0) {
				throw new ValidatorConfigError("Error in regex match: " + ex_0);
			}
			if (!isMatch) {
				state.fail(new ValidationError(
						net.named_data.jndn.security.v2.ValidationError.POLICY_ERROR,
						"The packet "
								+ packetName.toUri()
								+ " (KeyLocator="
								+ keyLocatorName.toUri()
								+ ") does not match the hyper relation key name regex "
								+ keyNameRegex_.getExpr()));
				return false;
			}
	
			Name keyNameMatchExpansion;
			try {
				keyNameMatchExpansion = keyNameRegex_.expand(keyNameExpansion_);
			} catch (NdnRegexMatcherBase.Error ex_1) {
				throw new ValidatorConfigError("Error in regex expand: " + ex_1);
			}
			Name packetNameMatchExpansion;
			try {
				packetNameMatchExpansion = packetNameRegex_
						.expand(packetNameExpansion_);
			} catch (NdnRegexMatcherBase.Error ex_2) {
				throw new ValidatorConfigError("Error in regex expand: " + ex_2);
			}
	
			bool result = net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.checkNameRelation(hyperRelation_,
					keyNameMatchExpansion, packetNameMatchExpansion);
			if (!result)
				state.fail(new ValidationError(net.named_data.jndn.security.v2.ValidationError.POLICY_ERROR,
						"KeyLocator check failed: hyper relation "
								+ net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.toString(hyperRelation_)
								+ " packet name match="
								+ packetNameMatchExpansion.toUri()
								+ ", key name match="
								+ keyNameMatchExpansion.toUri() + " of packet "
								+ packetName.toUri() + " (KeyLocator="
								+ keyLocatorName.toUri() + ") is invalid"));
	
			return result;
		}
	
		private readonly NdnRegexTopMatcher packetNameRegex_;
		private readonly String packetNameExpansion_;
		private readonly NdnRegexTopMatcher keyNameRegex_;
		private readonly String keyNameExpansion_;
		private readonly ConfigNameRelation.Relation hyperRelation_;
	}
}
