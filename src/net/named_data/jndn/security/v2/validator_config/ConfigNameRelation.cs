// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2019 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2.validator_config {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	
	/// <summary>
	/// ConfigNameRelation defines the ConfigNameRelation.Relation enum and static
	/// methods to work with name relations for the ValidatorConfig.
	/// </summary>
	///
	public class ConfigNameRelation {
		public enum Relation {
			EQUAL, IS_PREFIX_OF, IS_STRICT_PREFIX_OF
		}
	
		/// <summary>
		/// Get a string representation of the Relation enum.
		/// </summary>
		///
		/// <param name="relation">The value for the ConfigNameRelation.Relation enum.</param>
		/// <returns>The string representation.</returns>
		public static String toString(ConfigNameRelation.Relation  relation) {
			if (relation == net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.EQUAL)
				return "equal";
			else if (relation == net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.IS_PREFIX_OF)
				return "is-prefix-of";
			else if (relation == net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.IS_STRICT_PREFIX_OF)
				return "is-strict-prefix-of";
			else
				// We don't expect this to happen.
				return "";
		}
	
		/// <summary>
		/// Check whether name1 and name2 satisfy the relation.
		/// </summary>
		///
		/// <param name="relation">The value for the ConfigNameRelation.Relation enum.</param>
		/// <param name="name1">The first name to check.</param>
		/// <param name="name2">The second name to check.</param>
		/// <returns>True if the names satisfy the relation.</returns>
		public static bool checkNameRelation(ConfigNameRelation.Relation  relation, Name name1,
				Name name2) {
			if (relation == net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.EQUAL)
				return name1.equals(name2);
			else if (relation == net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.IS_PREFIX_OF)
				return name1.isPrefixOf(name2);
			else if (relation == net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.IS_STRICT_PREFIX_OF)
				return name1.isPrefixOf(name2) && name1.size() < name2.size();
			else
				// We don't expect this to happen.
				return false;
		}
	
		/// <summary>
		/// Convert relationString to a ConfigNameRelation.Relation enum.
		/// </summary>
		///
		/// <exception cref="ValidatorConfigError">if relationString cannot be converted.</exception>
		public static ConfigNameRelation.Relation  getNameRelationFromString(String relationString) {
			if (relationString.Equals("equal",StringComparison.InvariantCultureIgnoreCase))
				return net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.EQUAL;
			else if (relationString.Equals("is-prefix-of",StringComparison.InvariantCultureIgnoreCase))
				return net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.IS_PREFIX_OF;
			else if (relationString.Equals("is-strict-prefix-of",StringComparison.InvariantCultureIgnoreCase))
				return net.named_data.jndn.security.v2.validator_config.ConfigNameRelation.Relation.IS_STRICT_PREFIX_OF;
			else
				throw new ValidatorConfigError("Unsupported relation: "
						+ relationString);
		}
	}
}
