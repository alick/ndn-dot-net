// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2017-2018 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.v2 {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	
	/// <summary>
	/// The CertificateStorage class stores trusted anchors and has a verified
	/// certificate cache, and an unverified certificate cache.
	/// </summary>
	///
	public class CertificateStorage {
		public CertificateStorage() {
			this.trustAnchors_ = new TrustAnchorContainer();
			this.verifiedCertificateCache_ = new CertificateCacheV2(
					3600 * 1000.0d);
			this.unverifiedCertificateCache_ = new CertificateCacheV2(
					300 * 1000.0d);
		}
	
		/// <summary>
		/// Find a trusted certificate in the trust anchor container or in the
		/// verified cache.
		/// </summary>
		///
		/// <param name="interestForCertificate">The Interest for the certificate.</param>
		/// <returns>The found certificate, or null if not found.</returns>
		public CertificateV2 findTrustedCertificate(
				Interest interestForCertificate) {
			CertificateV2 certificate = trustAnchors_.find(interestForCertificate);
			if (certificate != null)
				return certificate;
	
			certificate = verifiedCertificateCache_.find(interestForCertificate);
			return certificate;
		}
	
		/// <summary>
		/// Check if the certificate with the given name prefix exists in the verified
		/// cache, the unverified cache, or in the set of trust anchors.
		/// </summary>
		///
		/// <param name="certificatePrefix">The certificate name prefix.</param>
		/// <returns>True if the certificate is known.</returns>
		public bool isCertificateKnown(Name certificatePrefix) {
			return trustAnchors_.find(certificatePrefix) != null
					|| verifiedCertificateCache_.find(certificatePrefix) != null
					|| unverifiedCertificateCache_.find(certificatePrefix) != null;
		}
	
		/// <summary>
		/// Cache the unverified certificate for a period of time (5 minutes).
		/// </summary>
		///
		/// <param name="certificate">The certificate packet, which is copied.</param>
		public void cacheUnverifiedCertificate(CertificateV2 certificate) {
			unverifiedCertificateCache_.insert(certificate);
		}
	
		/// <summary>
		/// Get the trust anchor container.
		/// </summary>
		///
		/// <returns>The trust anchor container.</returns>
		public TrustAnchorContainer getTrustAnchors() {
			return trustAnchors_;
		}
	
		/// <summary>
		/// Get the verified certificate cache.
		/// </summary>
		///
		/// <returns>The verified certificate cache.</returns>
		public CertificateCacheV2 getVerifiedCertificateCache() {
			return verifiedCertificateCache_;
		}
	
		/// <summary>
		/// Get the unverified certificate cache.
		/// </summary>
		///
		/// <returns>The unverified certificate cache.</returns>
		public CertificateCacheV2 getUnverifiedCertificateCache() {
			return unverifiedCertificateCache_;
		}
	
		/// <summary>
		/// Load a static trust anchor. Static trust anchors are permanently associated
		/// with the validator and never expire.
		/// </summary>
		///
		/// <param name="groupId">The certificate group id.</param>
		/// <param name="certificate"></param>
		public void loadAnchor(String groupId, CertificateV2 certificate) {
			trustAnchors_.insert(groupId, certificate);
		}
	
		/// <summary>
		/// Load dynamic trust anchors. Dynamic trust anchors are associated with the
		/// validator for as long as the underlying trust anchor file (or set of files)
		/// exists.
		/// </summary>
		///
		/// <param name="groupId">The certificate group id, which must not be empty.</param>
		/// <param name="path">The path to load the trust anchors.</param>
		/// <param name="refreshPeriod">updated when find is called.</param>
		/// <param name="isDirectory"></param>
		/// <exception cref="System.ArgumentException">If refreshPeriod is not positive.</exception>
		/// <exception cref="TrustAnchorContainer.Error">a group with groupId already exists</exception>
		public void loadAnchor(String groupId, String path,
				double refreshPeriod, bool isDirectory) {
			trustAnchors_.insert(groupId, path, refreshPeriod, isDirectory);
		}
	
		/// <summary>
		/// Load dynamic trust anchors. Dynamic trust anchors are associated with the
		/// validator for as long as the underlying trust anchor file (or set of files)
		/// exists.
		/// </summary>
		///
		/// <param name="groupId">The certificate group id, which must not be empty.</param>
		/// <param name="path">The path of the single file to load the trust anchors.</param>
		/// <param name="refreshPeriod">updated when find is called.</param>
		/// <exception cref="System.ArgumentException">If refreshPeriod is not positive.</exception>
		/// <exception cref="TrustAnchorContainer.Error">a group with groupId already exists</exception>
		public void loadAnchor(String groupId, String path,
				double refreshPeriod) {
			loadAnchor(groupId, path, refreshPeriod, false);
		}
	
		/// <summary>
		/// Remove any previously loaded static or dynamic trust anchors.
		/// </summary>
		///
		public void resetAnchors() {
			trustAnchors_.clear();
		}
	
		/// <summary>
		/// Cache the verified certificate a period of time (1 hour).
		/// </summary>
		///
		/// <param name="certificate">The certificate object, which is copied.</param>
		public void cacheVerifiedCertificate(CertificateV2 certificate) {
			verifiedCertificateCache_.insert(certificate);
		}
	
		/// <summary>
		/// Remove any cached verified certificates.
		/// </summary>
		///
		public void resetVerifiedCertificates() {
			verifiedCertificateCache_.clear();
		}
	
		/// <summary>
		/// Set the offset when the cache insert() and refresh() get the current time,
		/// which should only be used for testing.
		/// </summary>
		///
		/// <param name="nowOffsetMilliseconds">The offset in milliseconds.</param>
		public void setCacheNowOffsetMilliseconds_(
				double nowOffsetMilliseconds) {
			verifiedCertificateCache_
					.setNowOffsetMilliseconds_(nowOffsetMilliseconds);
			unverifiedCertificateCache_
					.setNowOffsetMilliseconds_(nowOffsetMilliseconds);
		}
	
		protected internal TrustAnchorContainer trustAnchors_;
		protected internal CertificateCacheV2 verifiedCertificateCache_;
		protected internal CertificateCacheV2 unverifiedCertificateCache_;
	}
}
