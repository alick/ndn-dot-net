// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
//
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
 /// <summary>
/// Copyright (C) 2014-2016 Regents of the University of California.
/// </summary>
///
namespace net.named_data.jndn.security.identity {
	
	using System;
	using System.Collections;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using net.named_data.jndn;
	using net.named_data.jndn.security;
	using net.named_data.jndn.security.certificate;
	using net.named_data.jndn.util;
	
	/// <summary>
	/// IdentityStorage is a base class for the storage of identity, public keys and
	/// certificates. Private keys are stored in PrivateKeyStorage.
	/// This is an abstract base class.  A subclass must implement the methods.
	/// </summary>
	///
	public abstract class IdentityStorage {
		/// <summary>
		/// Check if the specified identity already exists.
		/// </summary>
		///
		/// <param name="identityName">The identity name.</param>
		/// <returns>True if the identity exists, otherwise false.</returns>
		public abstract bool doesIdentityExist(Name identityName);
	
		/// <summary>
		/// Add a new identity. Do nothing if the identity already exists.
		/// </summary>
		///
		/// <param name="identityName">The identity name to be added.</param>
		public abstract void addIdentity(Name identityName);
	
		/// <summary>
		/// Revoke the identity.
		/// </summary>
		///
		/// <returns>True if the identity was revoked, false if not.</returns>
		public abstract bool revokeIdentity();
	
		/// <summary>
		/// Generate a name for a new key belonging to the identity.
		/// </summary>
		///
		/// <param name="identityName">The identity name.</param>
		/// <param name="useKsk">If true, generate a KSK name, otherwise a DSK name.</param>
		/// <returns>The generated key name.</returns>
		public Name getNewKeyName(Name identityName, bool useKsk) {
			long timestamp = (long) Math.Floor(net.named_data.jndn.util.Common.getNowMilliseconds());
			while (timestamp <= lastTimestamp_)
				// Make the timestamp unique.
				timestamp += 1;
			lastTimestamp_ = timestamp;
	
			// Get the number of seconds as a string.
			String timeString = "" + timestamp;
	
			String keyIdStr;
			if (useKsk)
				keyIdStr = ("ksk-" + timeString);
			else
				keyIdStr = ("dsk-" + timeString);
	
			Name keyName = new Name(identityName).append(keyIdStr);
	
			if (doesKeyExist(keyName))
				throw new SecurityException("Key name already exists");
	
			return keyName;
		}
	
		/// <summary>
		/// Check if the specified key already exists.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		/// <returns>true if the key exists, otherwise false.</returns>
		public abstract bool doesKeyExist(Name keyName);
	
		/// <summary>
		/// Add a public key to the identity storage. Also call addIdentity to ensure
		/// that the identityName for the key exists. However, if the key already
		/// exists, do nothing.
		/// </summary>
		///
		/// <param name="keyName">The name of the public key to be added.</param>
		/// <param name="keyType">Type of the public key to be added.</param>
		/// <param name="publicKeyDer">A blob of the public key DER to be added.</param>
		public abstract void addKey(Name keyName, KeyType keyType, Blob publicKeyDer);
	
		/// <summary>
		/// Get the public key DER blob from the identity storage.
		/// </summary>
		///
		/// <param name="keyName">The name of the requested public key.</param>
		/// <returns>The DER Blob.</returns>
		/// <exception cref="System.Security.SecurityException">if the key doesn't exist.</exception>
		public abstract Blob getKey(Name keyName);
	
		/// <summary>
		/// Activate a key.  If a key is marked as inactive, its private part will not
		/// be used in packet signing.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		public abstract void activateKey(Name keyName);
	
		/// <summary>
		/// Deactivate a key. If a key is marked as inactive, its private part will not
		/// be used in packet signing.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		public abstract void deactivateKey(Name keyName);
	
		/// <summary>
		/// Check if the specified certificate already exists.
		/// </summary>
		///
		/// <param name="certificateName">The name of the certificate.</param>
		/// <returns>True if the certificate exists, otherwise false.</returns>
		public abstract bool doesCertificateExist(Name certificateName);
	
		/// <summary>
		/// Add a certificate to the identity storage. Also call addKey to ensure that
		/// the certificate key exists. If the certificate is already installed, don't
		/// replace it.
		/// </summary>
		///
		/// <param name="certificate"></param>
		public abstract void addCertificate(IdentityCertificate certificate);
	
		/// <summary>
		/// Get a certificate from the identity storage.
		/// </summary>
		///
		/// <param name="certificateName">The name of the requested certificate.</param>
		/// <returns>The requested certificate.</returns>
		/// <exception cref="System.Security.SecurityException">if the certificate doesn't exist.</exception>
		public abstract IdentityCertificate getCertificate(Name certificateName);
	
		/*****************************************
		 *           Get/Set Default             *
		 *****************************************/
	
		/// <summary>
		/// Get the default identity.
		/// </summary>
		///
		/// <returns>The name of default identity.</returns>
		/// <exception cref="System.Security.SecurityException">if the default identity is not set.</exception>
		public abstract Name getDefaultIdentity();
	
		/// <summary>
		/// Get the default key name for the specified identity.
		/// </summary>
		///
		/// <param name="identityName">The identity name.</param>
		/// <returns>The default key name.</returns>
		/// <exception cref="System.Security.SecurityException">if the default key name for the identity is not set.</exception>
		public abstract Name getDefaultKeyNameForIdentity(Name identityName);
	
		/// <summary>
		/// Get the default certificate name for the specified identity.
		/// </summary>
		///
		/// <param name="identityName">The identity name.</param>
		/// <returns>The default certificate name.</returns>
		/// <exception cref="System.Security.SecurityException">if the default key name for the identity is notset or the default certificate name for the key name is not set.</exception>
		public Name getDefaultCertificateNameForIdentity(Name identityName) {
			Name keyName = getDefaultKeyNameForIdentity(identityName);
			return getDefaultCertificateNameForKey(keyName);
		}
	
		/// <summary>
		/// Get the default certificate name for the specified key.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		/// <returns>The default certificate name.</returns>
		/// <exception cref="System.Security.SecurityException">if the default certificate name for the key nameis not set.</exception>
		public abstract Name getDefaultCertificateNameForKey(Name keyName);
	
		/// <summary>
		/// Append all the identity names to the nameList.
		/// </summary>
		///
		/// <param name="nameList">Append result names to nameList.</param>
		/// <param name="isDefault"></param>
		public abstract void getAllIdentities(ArrayList nameList, bool isDefault);
	
		/// <summary>
		/// Append all the key names of a particular identity to the nameList.
		/// </summary>
		///
		/// <param name="identityName">The identity name to search for.</param>
		/// <param name="nameList">Append result names to nameList.</param>
		/// <param name="isDefault"></param>
		public abstract void getAllKeyNamesOfIdentity(Name identityName,
				ArrayList nameList, bool isDefault);
	
		/// <summary>
		/// Append all the certificate names of a particular key name to the nameList.
		/// </summary>
		///
		/// <param name="keyName">The key name to search for.</param>
		/// <param name="nameList">Append result names to nameList.</param>
		/// <param name="isDefault"></param>
		public abstract void getAllCertificateNamesOfKey(Name keyName,
				ArrayList nameList, bool isDefault);
	
		/// <summary>
		/// Set the default identity.  If the identityName does not exist, then clear
		/// the default identity so that getDefaultIdentity() throws an exception.
		/// </summary>
		///
		/// <param name="identityName">The default identity name.</param>
		public abstract void setDefaultIdentity(Name identityName);
	
		/// <summary>
		/// Set a key as the default key of an identity. The identity name is inferred
		/// from keyName.
		/// </summary>
		///
		/// <param name="keyName">The name of the key.</param>
		/// <param name="identityNameCheck"></param>
		public abstract void setDefaultKeyNameForIdentity(Name keyName,
				Name identityNameCheck);
	
		/// <summary>
		/// Set the default key name for the specified identity.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		public void setDefaultKeyNameForIdentity(Name keyName) {
			setDefaultKeyNameForIdentity(keyName, new Name());
		}
	
		/// <summary>
		/// Set the default key name for the specified identity.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		/// <param name="certificateName">The certificate name.</param>
		public abstract void setDefaultCertificateNameForKey(Name keyName,
				Name certificateName);
	
		/// <summary>
		/// Get the certificate of the default identity.
		/// </summary>
		///
		/// <returns>The requested certificate. If not found, return null.</returns>
		public IdentityCertificate getDefaultCertificate() {
			Name certName;
			try {
				certName = getDefaultCertificateNameForIdentity(getDefaultIdentity());
			} catch (SecurityException ex) {
				// The default is not defined.
				return null;
			}
	
			return getCertificate(certName);
		}
	
		/*****************************************
		 *            Delete Methods             *
		 *****************************************/
	
		/// <summary>
		/// Delete a certificate.
		/// </summary>
		///
		/// <param name="certificateName">The certificate name.</param>
		public abstract void deleteCertificateInfo(Name certificateName);
	
		/// <summary>
		/// Delete a public key and related certificates.
		/// </summary>
		///
		/// <param name="keyName">The key name.</param>
		public abstract void deletePublicKeyInfo(Name keyName);
	
		/// <summary>
		/// Delete an identity and related public keys and certificates.
		/// </summary>
		///
		/// <param name="identity">The identity name.</param>
		public abstract void deleteIdentityInfo(Name identity);
	
		private static long lastTimestamp_ = (long) Math.Floor(net.named_data.jndn.util.Common
					.getNowMilliseconds());
	}
}
